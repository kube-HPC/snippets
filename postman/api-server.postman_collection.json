{
	"info": {
		"_postman_id": "0f63b0f0-b1e0-424f-9975-b5f48be6e266",
		"name": "api-server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "exec",
			"item": [
				{
					"name": "/exec/pipeline",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/exec/pipeline/{{jobId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"pipeline",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/tree",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/exec/tree/{{jobId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"tree",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b907183-ebeb-4b6a-8ec9-48c483a9e1aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/exec/pipelines/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"pipelines",
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "exec raw",
			"item": [
				{
					"name": "/exec/raw - python",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d23871d4-094a-45a2-82ca-6bf32728521e",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"python\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"python\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [3,32,32,32]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - simple",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple-eval\",\n        \"nodes\": [\n            {\n                \"nodeName\": \"split\",\n                \"algorithmName\": \"eval-alg\",\n                \"input\": [\n                    \"#@flowInput.text\"\n                ],\n                \"extraData\": {\n                    \"code\": [\n                        \"function split(input) {\",\n                        \"return input[0].split(' ');\",\n                        \"}\"]\n                }\n            },\n            {\n                \"nodeName\": \"reduce\",\n                \"algorithmName\": \"eval-alg\",\n                \"input\": [\n                    \"*@split\"\n                ],\n                \"extraData\": {\n                    \"code\": [\n                        \"function reduce(input) {\",\n                        \"return input[0].reduce((all, word) => { \",\n                        \"if (word in all) {\",\n                        \"all[word]++;\",\n                        \"}\",\n                        \"else {\",\n                        \"all[word] = 1;\",\n                        \"}\",\n                        \"return all;\",\n                        \"}, {});\",\n                        \"}\"\n                    ]\n                }\n            },\n            {\n                \"nodeName\": \"count\",\n                \"algorithmName\": \"eval-alg\",\n                \"input\": [\n                    \"@reduce\"\n                ],\n                \"extraData\": {\n                    \"code\": [\n                        \"function count(input) {\",\n                        \"let dict = {}\",\n                        \"input[0].forEach(r => {\",\n                        \"Object.entries(r).forEach(([k, v]) => {\",\n                        \"if (!dict[k]) {\",\n                        \"dict[k] = 0;\",\n                        \"}\",\n                        \"dict[k] += v\",\n                        \"});\",\n                        \"});\",\n                        \"return dict\",\n                        \"}\"\n                    ]\n                }\n\n            }\n        ],\n            \"flowInput\": {\n        \"text\": [\"In mathematics and computer science, a directed acyclic graph \",\n            \"(DAG (About this sound listen)), is a finite directed graph with\",\n            \" no directed cycles. That is, it consists of finitely many vertices and\",\n            \"such that every edge is directed from earlier to later in the sequence.\",\n            \"DAGs can model many different kinds of information. \",\n            \"A spreadsheet can be modeled as a DAG, with a vertex \",\n            \"for each cell and an edge whenever the formula in one\"]\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n            \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n            \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - simple Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"eval-dynamic\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"eval1\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@flowInput.range\"\n            ],\n            \"extraData\": {\n                \"code\": [\n                    \"(input) => {\",\n                    \"const range = Array.from(Array(input[0]).keys());\",\n                    \"return range }\"\n                ]\n            }\n        },\n        {\n            \"nodeName\": \"evalsleep\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"#@eval1\",\n                \"@flowInput.time\"\n            ],\n            \"extraData\": {\n                \"code\": [\n                    \"(input,require)=> {\",\n                    \"return new Promise((resolve,reject)=>{setTimeout(()=>resolve(4),input[1])});}\"\n                ]\n            }\n        }\n    ],\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\",\n        \"ttl\": 3600\n    },\n    \"priority\": 3,\n    \"flowInput\": {\n        \"range\": 5,\n        \"time\": 10000\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - empty batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple-eval\",\n        \"nodes\": [\n            {\n                \"nodeName\": \"split\",\n                \"algorithmName\": \"eval-alg\",\n                \"input\": [\n                    \"#@flowInput.text\"\n                ],\n                \"extraData\": {\n                    \"code\": [\n                        \"function split(input) {\",\n                        \"return input[0].split(' ');\",\n                        \"}\"]\n                }\n            },\n            {\n                \"nodeName\": \"reduce\",\n                \"algorithmName\": \"eval-alg\",\n                \"input\": [\n                    \"*@split\"\n                ],\n                \"extraData\": {\n                    \"code\": [\n                        \"function reduce(input) {\",\n                        \"return input[0].reduce((all, word) => { \",\n                        \"if (word in all) {\",\n                        \"all[word]++;\",\n                        \"}\",\n                        \"else {\",\n                        \"all[word] = 1;\",\n                        \"}\",\n                        \"return all;\",\n                        \"}, {});\",\n                        \"}\"\n                    ]\n                }\n            },\n            {\n                \"nodeName\": \"count\",\n                \"algorithmName\": \"eval-alg\",\n                \"input\": [\n                    \"@reduce\"\n                ],\n                \"extraData\": {\n                    \"code\": [\n                        \"function count(input) {\",\n                        \"let dict = {}\",\n                        \"input[0].forEach(r => {\",\n                        \"Object.entries(r).forEach(([k, v]) => {\",\n                        \"if (!dict[k]) {\",\n                        \"dict[k] = 0;\",\n                        \"}\",\n                        \"dict[k] += v\",\n                        \"});\",\n                        \"});\",\n                        \"return dict\",\n                        \"}\"\n                    ]\n                }\n\n            }\n        ],\n            \"flowInput\": {\n        \"text\": [\"In mathematics and computer science, a directed acyclic graph \",\n            \"(DAG (About this sound listen)), is a finite directed graph with\",\n            \" no directed cycles. That is, it consists of finitely many vertices and\",\n            \"such that every edge is directed from earlier to later in the sequence.\",\n            \"DAGs can model many different kinds of information. \",\n            \"A spreadsheet can be modeled as a DAG, with a vertex \",\n            \"for each cell and an edge whenever the formula in one\"]\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n            \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n            \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - no - image",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"no-image\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"node1\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [46]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - DAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"DAG\",\n        \"nodes\": [{\n            \"nodeName\": \"A\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\"data\"]\n        },\n        {\n            \"nodeName\": \"B\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [{\"bras\": \"@A\"}]\n        },\n        {\n            \"nodeName\": \"C\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\"@B\"]\n        },\n        {\n            \"nodeName\": \"D\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\"@B\", \"@G\"]\n        },\n        {\n            \"nodeName\": \"E\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\"@B\", \"@C\", \"@D\"]\n        },\n        {\n            \"nodeName\": \"F\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\"@E\"]\n        },\n        {\n            \"nodeName\": \"G\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\"data\"]\n        }]\n\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - cpu-load",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"cpu\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"cpu-load\",\n            \"input\": [{\n            \t\"cpu\": 2,\n            \t\"duration\": 300\n            }]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - apak-batch-crash-test",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"apak-batch-crash-test\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"eval1\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"@flowInput.range\"\n           ],\n           \"extraData\":{\n               \"code\":[\n                   \"(input) => {\",\n                   \"const range = Array.from(Array(input[0]).keys());\",\n                   \"return range }\"\n\n                   ]\n           }\n       },\n       {\n           \"nodeName\": \"apak\",\n           \"algorithmName\": \"red-alg\",\n           \"input\": [\n               {\n                       \"SessionGuid\": \"#@eval1\",\n                       \"SessionFilePath\": \"http://10.32.10.24:9000/apak-data/test1.wav\",\n                       \"SpeakerId\": \"1\",\n                       \"output_file_path\":\"/ApakMCR/example_input_output/out0.csv\"\n                  \n                }\n             \n           ]\n       }\n   ],\n   \"flowInput\": {\n       \"range\":1\n   },\n   \"options\": {\n       \"batchTolerance\": 100,\n       \"progressVerbosityLevel\": \"debug\"\n   },\n   \"webhooks\": {\n       \"progress\": \"http://webhook-stub-ui:3002/webhook/progress\",\n       \"result\": \"http://webhook-stub-ui:3002/webhook/result\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - crazy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"crazy\",\n    \"nodes\": [\n    \t{\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\n                \"#@flowInput.files.green\"\n            ]\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"yellow-alg\",\n            \"input\": [\n                \"#@flowInput.files.yellow\"\n            ]\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"black-alg\",\n            \"input\": [\n            \t\"*@green\",\n                \"@green\",\n                \"*@yellow\",\n                \"@yellow\"\n            ]\n        }\n    ],\n    \"flowInput\": {\n        \"files\": {\n            \"green\": [\n                \"links-1\",\n                \"links-2\",\n                \"links-3\",\n                \"links-4\",\n                \"links-5\"\n            ],\n            \"yellow\": [\n                \"links-6\",\n                \"links-7\",\n                \"links-8\",\n                \"links-9\",\n                \"links-10\"\n            ]\n        }\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/stored - complex-wait-any",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"complex-wait-any\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"#[1...11]\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"(input) => {\",\n                     \"return input[0]\",\n                \"}\"]\n            }\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"#[11...21]\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"(input) => {\",\n                     \"return input[0]\",\n                \"}\"]\n            }\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@green\",\n                \"@yellow\",\n                \"*@green\",\n                \"*@yellow\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"(input) => {\",\n            \t     \"if(input[2] % 2 === 0) { \",\n            \t    \t\t\"throw new Error('no even numbers')\",\n            \t     \"}\",\n            \t     \"const arr = input[0].concat(input[1])\",\n                     \"arr.push([input[2], input[3]])\",\n                     \"return arr\",\n                \"}\"]\n            }\n        }\n    ],\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/stored - complex-wait-any Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"complex-wait-any\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"hello\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"(input) => {\",\n                     \"return input[0]\",\n                \"}\"]\n            }\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"batch\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"(input) => {\",\n                     \"return input[0]\",\n                \"}\"]\n            }\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@green\",\n                \"@yellow\",\n                \"*@green\",\n                \"*@yellow\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"(input) => {\",\n            \t     \"const str1 = input[0] + ' ' + input[1]\",\n            \t     \"const str2 = input[2] + ' ' + input[3]\",\n                     \"return [str1, str2]\",\n                \"}\"]\n            }\n        }\n    ],\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/stored - complex-wait-any Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"complex-wait-any\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"#[1...11]\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"(input) => {\",\n                     \"return input[0]\",\n                \"}\"]\n            }\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"#[11...21]\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"(input) => {\",\n                     \"return input[0]\",\n                \"}\"]\n            }\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@green\",\n                \"@yellow\",\n                \"*@green\",\n                \"*@yellow\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"(input) => {\",\n            \t     \"if(input[2] % 2 === 0) { \",\n            \t    \t\t\"throw new Error('no even numbers')\",\n            \t     \"}\",\n            \t     \"const arr = input[0].concat(input[1])\",\n                     \"arr.push([input[2], input[3]])\",\n                     \"return arr\",\n                \"}\"]\n            }\n        }\n    ],\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/stored - double-wait-any",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"double-wait-any\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\n                \"#@flowInput.files.links\"\n            ]\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"yellow-alg\",\n            \"input\": [\n                \"#@flowInput.files.links\"\n            ]\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"black-alg\",\n            \"input\": [\n                \"*@green\",\n                \"*@yellow\"\n            ]\n        }\n    ],\n    \"flowInput\": {\n        \"files\": {\n            \"links\": [\n                \"links-1\",\n                \"links-2\",\n                \"links-3\"\n            ]\n        }\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/stored - simple-wait-any",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple-wait-any\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\n                \"#[0...2]\"\n            ]\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"black-alg\",\n            \"input\": [\n                \"*@green\"\n            ]\n        }\n    ],\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5609c16f-1f38-4acb-b2d1-fb11b767ef4a",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"batch\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"one\",\n           \"algorithmName\": \"green-alg\",\n           \"input\": [\n               \"#[1...50]\"\n           ]\n       },\n       {\n           \"nodeName\": \"two\",\n           \"algorithmName\": \"green-alg\",\n           \"input\": [\n\t\t\t\t\"#[1...50]\"\n           ]\n       },\n       {    \n           \"nodeName\": \"three\",\n           \"algorithmName\": \"green-alg\",\n           \"input\": [\n               \"#[1...50]\"\n           ]\n       }\n   ],\n   \"options\": {\n       \"batchTolerance\": 100,\n       \"progressVerbosityLevel\": \"debug\"\n   },\n   \"webhooks\": {\n       \"progress\": \"http://localhost:3003/webhook/progress\",\n       \"result\": \"http://localhost:3003/webhook/result\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - batch on node",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"batch-on-node\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\n                \"@flowInput.files.links\"\n            ]\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"yellow-alg\",\n            \"input\": [\n                \"#@green.data\"\n            ]\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"black-alg\",\n            \"input\": [\n                \"@yellow\"\n            ]\n        }\n    ],\n    \"flowInput\": {\n        \"files\": {\n            \"links\": [\n                \"links-1\",\n                \"links-2\",\n                \"links-3\",\n                \"links-4\",\n                \"links-5\"\n            ]\n        }\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - big-batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"big-batch\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\n                \"#[0...10]\"\n            ]\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"yellow-alg\",\n            \"input\": [\n            \t\"#[0...10]\"\n            ]\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"black-alg\",\n            \"input\": [\n            \t\"#[0...10]\"\n            ]\n        }\n    ],\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - batch input",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"big-batch\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"yellow-alg\",\n            \"input\": [\n                \"#[1,2,3,4,5]\"\n            ]\n        }\n    ],\n    \"options\": {\n        \"batchTolerance\": 0,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - big-wait-batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"big-wait-batch\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\n                \"#@flowInput.files.links\"\n            ]\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"yellow-alg\",\n            \"input\": [\n                 \"#@flowInput.files.links\"\n            ]\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"black-alg\",\n            \"input\": [\n            \t\"@green\",\n                \"@yellow\"\n            ]\n        }\n    ],\n    \"flowInput\": {\n        \"files\": {\n            \"links\": [\n                \"links-1\",\n                \"links-2\",\n                \"links-3\"\n            ]\n        }\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "exec stored",
			"item": [
				{
					"name": "/exec/stored - simple",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple\",\n    \"priority\": 5\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/stored - simple Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"evalWaitAny\",\n    \"flowInput\": {\n        \"inputs\": [\n            [\n                10000,\n                5\n            ],\n            [\n                5000,\n                12\n            ],\n            [\n                15000,\n                87\n            ],\n            [\n                7000,\n                125\n            ]\n        ],\n        \"inputsadd\": [\n            3\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/stored - simple trigger",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"trigger1\"\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/stored - batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"batch\",\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/stored - big-batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"big-batch\",\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/stored - trigger",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"trigger-cron\"\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/stored - big-wait-batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"big-wait-batch\",\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/stored - wait-any-batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"wait-any-batch\",\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/stored - batch-on-node",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"batch-on-node\",\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/stored - simple-wait-batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple-wait-batch\",\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/stored - simple-eval",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple-eval\",\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "internal",
			"item": [
				{
					"name": "/pods",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{monitorUrl}}/{{jobId}}?",
							"host": [
								"{{monitorUrl}}"
							],
							"path": [
								"{{jobId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/algorithms/queue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b907183-ebeb-4b6a-8ec9-48c483a9e1aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{internalUrl}}/algorithms/queue",
							"host": [
								"{{internalUrl}}"
							],
							"path": [
								"algorithms",
								"queue"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/stored",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a72a99ec-d662-4c59-90fd-76bd6c539990",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple\",\n    \"jobId\": \"stam\",\n    \"type\": \"stored\"\n}"
						},
						"url": {
							"raw": "{{internalUrl}}/exec/stored",
							"host": [
								"{{internalUrl}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/clean",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a72a99ec-d662-4c59-90fd-76bd6c539990",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jobId\": \"simple:d35cca12-22e0-4b1d-aaf4-392b9066b0bc.simple\"\n}"
						},
						"url": {
							"raw": "{{internalUrl}}/exec/clean",
							"host": [
								"{{internalUrl}}"
							],
							"path": [
								"exec",
								"clean"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "eval",
			"item": [
				{
					"name": "/exec/raw - DAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"DAG\",\n    \"nodes\": [{\n            \"nodeName\": \"A\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [1, \"@flowInput.timeout\"],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t\"return new Promise((resolve,reject) => {\",\n\t\t          \t\"setTimeout(() => \",\n\t\t          \t   \"resolve(input[0] * 2)\",\n\t\t          \t\",input[1])\",\n            \t\t\t\"});\",\n                   \"}\"]}\n        },\n        {\n            \"nodeName\": \"B\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\"@A\", \"@flowInput.timeout\"],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t\"return new Promise((resolve,reject) => {\",\n\t\t          \t\"setTimeout(() => \",\n\t\t          \t   \"resolve(input[0] * 2)\",\n\t\t          \t\",input[1])\",\n            \t\t\t\"});\",\n                   \"}\"]}\n        },\n        {\n            \"nodeName\": \"C\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\"@B\", \"@flowInput.timeout\"],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t\"return new Promise((resolve,reject) => {\",\n\t\t          \t\"setTimeout(() => \",\n\t\t          \t   \"resolve(input[0] * 2)\",\n\t\t          \t\",input[1])\",\n            \t\t\t\"});\",\n                   \"}\"]}\n        },\n        {\n            \"nodeName\": \"D\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\"@B\", \"@G\", \"@flowInput.timeout\"],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t\"return new Promise((resolve,reject) => {\",\n\t\t          \t\"setTimeout(() => \",\n\t\t          \t   \"resolve(input[0] * 2)\",\n\t\t          \t\",input[2])\",\n            \t\t\t\"});\",\n                   \"}\"]}\n        },\n        {\n            \"nodeName\": \"E\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\"@B\", \"@C\", \"@D\", \"@flowInput.timeout\"],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t\"return new Promise((resolve,reject) => {\",\n\t\t          \t\"setTimeout(() => \",\n\t\t          \t   \"resolve(input[0] * 2)\",\n\t\t          \t\",input[3])\",\n            \t\t\t\"});\",\n                   \"}\"]}\n        },\n        {\n            \"nodeName\": \"F\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\"@E\", \"@flowInput.timeout\"],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t\"return new Promise((resolve,reject) => {\",\n\t\t          \t\"setTimeout(() => \",\n\t\t          \t   \"resolve(input[0] * 2)\",\n\t\t          \t\",input[1])\",\n            \t\t\t\"});\",\n                   \"}\"]}\n        },\n        {\n            \"nodeName\": \"G\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [1, \"@flowInput.timeout\"],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t\"return new Promise((resolve,reject) => {\",\n\t\t          \t\"setTimeout(() => \",\n\t\t          \t   \"resolve(input[0] * 2)\",\n\t\t          \t\",input[1])\",\n            \t\t\t\"});\",\n                   \"}\"]}\n        }],\n    \"flowInput\": {\n        \"timeout\": 80000\n    },\n    \"priority\": 5\n\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - eval sort alg",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d762e8f-14a8-44d9-9061-99fe6ab30db8",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"python-sort\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"one\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [[4,7,9,1,3,2,5,6,8], \"asc\"]\n       }\n   ]\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - code API - AlgorithmExecution",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fab05b2a-7c7f-4919-922e-7286d9fbe16b",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"code-API\",\n   \"nodes\": [\n   \t  {\n            \"nodeName\": \"A\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [1, \"flowInput\"]\n       },\n       {\n           \"nodeName\": \"B\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\"throw\", \"@A\", 1, 2, false, [1, 2, 3], { \"data\": \"bla\" }],\n           \"extraData\":{\n            \t\"code\": [\n            \t\"function run(input, self) {\",\n            \t\n            \t    \"const iterations = 2\",\n            \t    \n            \t   \t\"function execAlgorithm(algorithmName, input, self, iterations) {\",\n            \t   \t\n            \t   \t\t\"for (let i = 0; i < iterations; i++) {\",\n\t\t\t\t            \"const message = {\",\n\t\t\t\t                \"execId: algorithmName + '-' + i,\",\n\t\t\t\t                \"algorithmName: algorithmName + '-' + 'alg',\",\n\t\t\t\t                \"input: input,\",\n\t\t\t\t                \"resultAsRaw: false\",\n\t\t\t\t            \"};\",\n\t            \t\t\t\"self.startAlgorithmExecution(message)\",\n                    \t\"}\",\n            \t   \t\"}\",\n            \t   \t\n            \t   \t\"setTimeout(() => {\",\n      \t    \t\t   \"// self._sendDone('Iam done...')\",\n      \t\t\t\t\"}, 2000)\",\n            \t\n            \t   \t\"execAlgorithm('green', input, self, iterations)\",\n                    \"execAlgorithm('yellow', input, self, iterations)\",\n                    \"execAlgorithm('black', input, self, iterations)\",\n                    \"execAlgorithm('red', input, self, iterations)\",\n                    \n                    \n                    \"setTimeout(() => {\",\n      \t    \t\t   \"// Object.keys(self._execIds).forEach(e => self.stopAlgorithmExecution({ execId: e, reason: 'postman cancel' }));\",\n      \t\t\t\t\"}, 5000)\",\n      \t\t\t\t\n            \t\"}\"\n                 ]\n           }\n       },\n       {\n            \"nodeName\": \"C\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [1, \"@B\", 3]\n       }\n   ]\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - code API sub-pipeline",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fab05b2a-7c7f-4919-922e-7286d9fbe16b",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"code-API\",\n   \"nodes\": [\n   \t  {\n            \"nodeName\": \"A\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [1, \"flowInput\"]\n       },\n       {\n           \"nodeName\": \"B\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\"throwx\", \"@A\", 1, 2, false, [1, 2, 3], { \"data\": \"bla\" }],\n           \"extraData\":{\n            \t\"code\": [\n            \t\"function run(input, self) {\",\n            \t    \"const iterations = 5\",\n            \t    \"const subPipelines = []\",\n            \t    \n            \t   \t\"async function startSubPipeline(name, input, self, iterations) {\",\n            \t   \t\n            \t   \t\t\"for (let i = 0; i < iterations; i++) {\",\n\t\t\t\t            \"const subPipeline = {\",\n\t\t\t\t                \"name: name\",\n\t\t\t\t            \"};\",\n\t            \t\t\t\"const sub = self.startSubPipeline({ subPipeline })\",\n\t            \t\t\t\"subPipelines.push(sub.id)\",\n\t            \t\t\t\"// await sub.done\",\n                    \t\"}\",\n            \t   \t\"}\",\n            \t\n            \t   \t\"startSubPipeline('simple', input, self, iterations)\",\n            \t   \t\n            \t   \t\"setTimeout(async () => {\",\n            \t   \t   \"const subPipelineId = subPipelines[2]\",\n      \t    \t\t   \"// await self.stopSubPipeline({ subPipelineId, reason: 'cancel...' })\",\n      \t\t\t\t\"}, 2000)\",\n      \t\t\t\t\n      \t\t\t\t\"return subPipelines\",\n      \t\t\t\t\n            \t\"}\"\n                 ]\n           }\n       },\n       {\n            \"nodeName\": \"C\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [1, \"@B\", 3]\n       }\n   ]\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - eval sort alg Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"python-alg\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"one\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\"http://nibbler.silktide.com/\", \"blla\", 23]\n       }\n   ]\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - DAG A",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"DAG\",\n    \"nodes\": [{\n\t    \t\"nodeName\": \"A\",\n\t    \t\"algorithmName\": \"eval-alg\",\n\t    \t\"input\": [\"#[0...1]\"]\n        }\n       \n    ]\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw eval - props path Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"eval-demo\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"node1\",\n           \"algorithmName\": \"green-alg\",\n           \"input\": [\n           \t     10\n           ],\n           \"extraData\": {\n               \"code\": [\n                   \"(input) => {\",\n                   \"const array = Array.from(Array(input[0]).keys());\",\n                   \"return array }\"\n               ]}\n       },\n       {\n           \"nodeName\": \"node2\",\n           \"algorithmName\": \"green-alg\",\n           \"input\": [\n           \t   \"#@node1\",\n               \"@node1.array.0\",\n               \"@node1.array.50\",\n               \"@node1.array.99\",\n               \"@node1.number\",\n               \"@node1.string\",\n               \"@node1.object.prop\"\n           ],\n           \"extraData\":{\n               \"code\":[\n                   \"(input) => {\",\n                   \"const result = input\",\n                   \"return result }\"\n                   ]\n           }\n       }\n   ],\n   \"flowInput\": {\n       \"arraySize\": 20\n   },\n   \"options\": {\n       \"batchTolerance\": 100,\n       \"progressVerbosityLevel\": \"debug\"\n   },\n   \"webhooks\": {\n       \"progress\": \"http://localhost:3003/webhook/progress\",\n       \"result\": \"http://localhost:3003/webhook/result\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - skipped node",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test\",\n    \"description\": \"description\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"one\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                 \"@flowInput.size\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function array(input) {\",\n                     \"const array = Array.from(Array(input[0]).keys());\",\n                     \"return { array, data: {'foo': 'bar'}, 'number':80 }\",\n                \"}\"]}\n        },\n        {\n            \"nodeName\": \"two\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                 \"#@one.array\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function split(input) {\",\n                    \"return input[0]\",\n                \"}\"]}\n        },\n        {\n            \"nodeName\": \"three\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n            \t \"@two\",\n            \t \"@one.data\",\n                 \"@one.no_data\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function split(input) {\",\n                    \"return input\",\n                \"}\"]}\n        }\n    ],\n    \"flowInput\": {\n        \"array\": [],\n        \"size\": 0\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - s3 tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"s3-testing\",\n   \"nodes\": [\n          {\n           \"nodeName\": \"node1\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"@flowInput.arraySize\",\n               \"@flowInput.bufferSize\"\n           ],\n           \"extraData\": {\n               \"code\": [\n                   \"(input) => {\",\n                   \"return new Array(input[0]).fill(Buffer.alloc(input[1]));}\"\n               ]\n           }\n       },\n       {\n           \"nodeName\": \"node2\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"#@node1\"\n           ],\n           \"extraData\": {\n               \"code\": [\n                   \"(input) => {\",\n                   \"return input;}\"\n               ]\n           }\n       },\n       {\n           \"nodeName\": \"node3\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"@node2\"\n           ],\n           \"extraData\": {\n               \"code\": [\n                   \"(input) => {\",\n                   \"return input;}\"\n               ]\n           }\n       }\n   ],\n   \"options\": {\n       \"batchTolerance\": 60,\n       \"progressVerbosityLevel\": \"debug\"\n   },\n   \"priority\": 3,\n   \"flowInput\": {\n       \"arraySize\": 100,\n       \"bufferSize\": 150000\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - crazy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"crazy\",\n    \"nodes\": [\n    \t{\n            \"nodeName\": \"one\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"#[1...5]\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t\t\"return new Promise((resolve,reject) => {\",\n\t\t          \t   \"setTimeout(() => \",\n\t\t          \t     \"resolve(input[0])\",\n\t\t          \t   \",input[0] * 1000)\",\n            \t\t  \"});\",\n              \"}\"]}\n        },\n        {\n            \"nodeName\": \"two\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"#[6...10]\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t\t\"return new Promise((resolve,reject) => {\",\n\t\t          \t\t\"setTimeout(() => \",\n\t\t          \t\t\t\"resolve(input[0])\",\n\t\t          \t\t\",input[0] * 1000)\",\n            \t\t \"});\",\n              \"}\"]}\n        },\n        {\n            \"nodeName\": \"three\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n            \t\"*@one\",\n                \"@one\",\n                \"*@two\",\n                \"@two\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t  \"return input\",\n                 \"}\"]}\n        },\n        {\n            \"nodeName\": \"four\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@three\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t  \"return input[0]\",\n                 \"}\"]}\n        },\n        {\n            \"nodeName\": \"five\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n            \t\"@three\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t  \"return input[0]\",\n                 \"}\"]}\n        },\n        {\n            \"nodeName\": \"six\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n            \t\"@four\", \"@five\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t  \"return input\",\n                 \"}\"]}\n        }\n    ],\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - batch on batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"one\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                 \"#@flowInput.nums\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t     \"(input) => { return Array.from(Array(input[0]).keys()); }\"\n                ]}\n        },\n        {\n            \"nodeName\": \"two\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\"#@one\"],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function split(input) {\",\n                    \"return input[0] + 1\",\n                \"}\"]}\n        },\n        {\n            \"nodeName\": \"three\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                 \"#@two\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function split(input) {\",\n                    \"return input[0] + 1\",\n                \"}\"]}\n        }\n    ],\n    \"flowInput\": {\n        \"nums\": [10, 10, 10]\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - process.exit",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"one\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                 \"bla\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function exit(input) {\",\n            \t\t\"return new Promise((resolve,reject) => {\",\n          \t    \t\t\"setTimeout(() => \",\n          \t    \t\t    \"process.exit(1)\",\n          \t\t\t\t\",1000)\",\n            \t\t\t\"});\",\n                \t\"}\"]}\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - countEven",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"countEven\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"even\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"*@flowInput.nums\"\n            ],\n            \"extraData\": {\n                \"code\": [\n                    \"function split(input) {\",\n                    \"if ((input[0][0] + input[0][1]) % 2 === 0) return true\",\n                    \"}\"\n                ]\n            }\n        }\n        \n    ],\n    \"options\": {\n        \"batchTolerance\": 60,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"priority\": 3,\n    \"flowInput\": {\n        \"nums\": [\n            [\n                2,\n                3\n            ],\n            [\n                3,\n                5\n            ],\n            [\n                4,\n               5\n            ],\n            [\n                676666,\n               5\n            ],\n            [\n                566,\n                2\n            ],\n            [\n                12335,\n                8989\n            ],\n            [\n                3,\n                3\n            ],\n            [\n                3,\n                3\n            ],\n            [\n                4,\n                4\n            ],\n            [\n                1,\n                1\n            ]\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - throw",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2bc8912c-2698-4306-8f7d-0c597b877857",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"countEven\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"one\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\"#[1,2,3,4,5,6,7,8,9,10]\"],\n            \"extraData\": {\n                \"code\": [\n                    \"function throwErr(input) {\",\n                          \"if(input[0] % 2 === 0) {\",\n                              \"throw new Error('ooppps with even input')\",\n                           \"}\",\n                           \"return input[0]\",\n                      \"}\"\n                ]\n            }\n        }\n    ],\n    \"options\": {\n        \"batchTolerance\": 10,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - eval demo",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"eval-demo\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"eval1\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"@flowInput.range\"\n           ],\n           \"extraData\":{\n             \"code\":[\n                   \"(input) => {\",\n                   \"const range = Array.from(Array(input[0]).keys());\",\n                   \"return range }\"\n\n               ]\n           }\n       },\n       {\n           \"nodeName\": \"eval2\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"#@eval1\"\n           ],\n           \"extraData\":{\n             \"code\":[\n                   \"(input) => {\",\n                   \"const result = input[0];\",\n                   \"return result }\"\n\n               ]\n           }\n       }\n   ],\n   \"flowInput\": {\n     \"range\":10\n   },\n   \"options\": {\n       \"batchTolerance\": 100,\n       \"progressVerbosityLevel\": \"debug\"\n   },\n   \"webhooks\": {\n       \"progress\": \"http://localhost:3003/webhook/progress\",\n       \"result\": \"http://localhost:3003/webhook/result\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - eval wait",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d07f8d0-c1ae-4cc1-a457-c983d0241d4f",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"eval-wait\",\n  \"nodes\": [\n    {\n      \"nodeName\": \"evalsleep\",\n      \"algorithmName\": \"eval-alg\",\n      \"input\": [\n        \"flowInput.inputs\"\n      ],\n      \"extraData\": {\n        \"code\": [\n          \"(input) => {\",\n          \"return new Promise((resolve,reject) => {\",\n          \t\"setTimeout(() => \",\n          \t   \"resolve(4)\",\n          \t\",20000)\",\n             \"});\",\n           \"}\"\n        ]\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - eval wait copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"batch\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"one\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"#[1...50]\"\n           ],\n           \"extraData\":{\n             \"code\":[\n                   \"(input) => {\",\n                   \"const result = input[0];\",\n                   \"return { result } }\"\n\n               ]\n           }\n       },\n       {\n           \"nodeName\": \"two\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"#@one.result\"\n           ],\n           \"extraData\":{\n             \"code\":[\n                   \"(input) => {\",\n                   \"const result = input[0];\",\n                   \"return result }\"\n\n               ]\n           }\n       }\n   ],\n   \"flowInput\":{\n   \t    \"files\": []\n   },\n   \"options\": {\n       \"batchTolerance\": 100,\n       \"progressVerbosityLevel\": \"debug\"\n   },\n   \"webhooks\": {\n       \"progress\": \"http://localhost:3003/webhook/progress\",\n       \"result\": \"http://localhost:3003/webhook/result\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw eval - props path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"eval-demo\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"node1\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"@flowInput.arraySize\"\n           ],\n           \"extraData\": {\n               \"code\": [\n                   \"(input) => {\",\n                   \"const array = Array.from(Array(input[0]).keys());\",\n                   \"const number = 34\",\n                   \"const string = 'bla'\",\n                   \"const object = {prop: 100}\",\n                   \"return { array, number, string, object }}\"\n               ]}\n       },\n       {\n           \"nodeName\": \"node2\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"@node1.array\",\n               \"@node1.number\",\n               \"@node1.string\",\n               \"@node1.object.prop\"\n           ],\n           \"extraData\":{\n               \"code\":[\n                   \"(input) => {\",\n                   \"const result = input\",\n                   \"return result }\"\n                   ]\n           }\n       }\n   ],\n   \"flowInput\": {\n       \"arraySize\": 20\n   },\n   \"options\": {\n       \"batchTolerance\": 100,\n       \"progressVerbosityLevel\": \"debug\"\n   },\n   \"webhooks\": {\n       \"progress\": \"http://localhost:3003/webhook/progress\",\n       \"result\": \"http://localhost:3003/webhook/result\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw eval - wait any batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"eval-demo\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"eval1\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"#@flowInput.ranges\"\n           ]\n       },\n       {\n           \"nodeName\": \"eval2\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"*@eval1\"\n           ],\n           \"extraData\":{\n               \"code\":[\n                   \"(input) => {\",\n\t                   \"if(input[0] === 100) {\",\n\t                \t\t\"throw new Error('oooops')}\",\n\t                \t\"return input[0]}\"\n                   ]\n           }\n       },\n       {\n           \"nodeName\": \"eval3\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"@eval2\"\n           ],\n           \"extraData\":{\n               \"code\":[\n                   \"(input) => {\",\n\t                \t\"return input}\"\n                   ]\n           }\n       }\n   ],\n   \"flowInput\": {\n       \"ranges\": [100, 200]\n   },\n   \"options\": {\n       \"batchTolerance\": 100,\n       \"progressVerbosityLevel\": \"debug\"\n   },\n   \"webhooks\": {\n       \"progress\": \"http://localhost:3003/webhook/progress\",\n       \"result\": \"http://localhost:3003/webhook/result\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw eval - double wait any",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"eval-demo\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"eval1\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"#[0...10]\"\n           ],\n           \"extraData\":{\n               \"code\":[\n                   \"(input) => {\",\n                   \"if(input[0] % 2 === 0) { throw new Error('no odd numbers') }\",\n                   \"return input[0] }\"\n                   ]\n           }\n       }\n   ],\n   \"options\": {\n       \"batchTolerance\": 100,\n       \"progressVerbosityLevel\": \"debug\"\n   },\n   \"webhooks\": {\n       \"progress\": \"http://localhost:3003/webhook/progress\",\n       \"result\": \"http://localhost:3003/webhook/result\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw eval - countEven",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"countEven\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"even\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"#@flowInput.nums\"\n            ],\n            \"extraData\": {\n                \"code\": [\n                    \"function split(input) {\",\n                    \"return (input[0][0] + input[0][1]) % 2 === 0\",\n                    \"}\"\n                ]\n            }\n        },\n        {\n            \"nodeName\": \"count\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@even\"\n            ],\n            \"extraData\": {\n                \"code\": [\n                    \"function count (input) {\",\n                    \"let counter=0\",\n                    \"for (let i=0 ; i<input[0].length ; i++){\",\n                    \"if (input[0][i]){\",\n                    \"counter++}}\",\n                    \"return counter\",\n                    \"}\"\n                ]\n            }\n        }\n    ],\n    \"options\": {\n        \"batchTolerance\": 60,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"priority\": 3,\n    \"flowInput\": {\n        \"nums\": [\n            [\n                2,\n                3\n            ],\n            [\n                3,\n                3\n            ],\n            [\n                4,\n                4\n            ],\n            [\n                676666,\n                4\n            ],\n            [\n                566,\n                2\n            ],\n            [\n                12335,\n                8989\n            ],\n            [\n                2,\n                3\n            ],\n            [\n                3,\n                3\n            ],\n            [\n                4,\n                4\n            ],\n            [\n                1,\n                1\n            ]\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - wc",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple-eval\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"split\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                 \"#@flowInput.text\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function split(input) {\",\n                     \"return input[0].split(' ');\",\n                \"}\"]}\n        },\n        {\n            \"nodeName\": \"reduce\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"*@split\"\n            ],\n            \"extraData\":{\n               \"code\": [\n           \t    \"function reduce(input) {\",\n                   \"return input[0].reduce((all, word) => { \",\n                         \"if (word in all) {\",\n                      \t    \"all[word]++;\",\n                      \t\"}\",\n                      \t\"else {\",\n                      \t\t\"all[word] = 1;\",\n                      \t\"}\",\n                      \t\"return all;\",\n                      \"}, {});\",\n                   \"}\"\n            ]}\n        },\n        {\n            \"nodeName\": \"count\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\n                \"@reduce\"\n            ],\n             \"extraData\":{\n                \"code\": [\n          \t    \"function count(input) {\",\n          \t        \"let dict = {}\",\n          \t        \"input[0].forEach(r => {\",\n          \t           \"Object.entries(r).forEach(([k, v]) => {\",\n                          \"if (!dict[k]) {\",\n                              \"dict[k] = 0;\",\n                           \"}\",\n                           \"dict[k] += v\",\n                           \"});\",\n                        \"});\",\n                       \"return dict\",\n          \t       \"}\"\n            ]}\n             \n        }\n    ],\n    \"flowInput\": {\n        \"text\": [\"In mathematics and computer science, a directed acyclic graph \",\n\t\t\t    \"(DAG (About this sound listen)), is a finite directed graph with\",\n\t\t\t    \" no directed cycles. That is, it consists of finitely many vertices and\",\n\t\t\t    \"edges, with each edge directed from one vertex to another, \",\n\t\t\t    \"such that there is no way to start at any vertex v and follow\",\n\t\t\t    \"a consistently-directed sequence of edges that eventually \",\n\t\t\t    \"loops back to v again. Equivalently, a DAG is a directed graph\",\n\t\t\t    \"that has a topological ordering, a sequence of the vertices \",\n\t\t\t    \"such that every edge is directed from earlier to later in the sequence.\",\n\t\t\t    \"DAGs can model many different kinds of information. \",\n\t\t\t    \"A spreadsheet can be modeled as a DAG, with a vertex \",\n\t\t\t    \"for each cell and an edge whenever the formula in one \",\n\t\t\t    \"cell uses the value from another; a topological ordering of this \",\n\t\t\t    \"DAG can be used to update all cell values when the spreadsheet is \",\n\t\t\t    \"changed. Similarly, topological orderings of DAGs can be used to order \",\n\t\t\t    \"the compilation operations in a makefile. The program evaluation and review \",\n\t\t\t    \"technique uses DAGs to model the milestones and activities of large human \",\n\t\t\t    \"projects, and schedule these projects to use as little total time as possible. \",\n\t\t\t    \"Combinational logic blocks in electronic circuit design, and the operations \",\n\t\t\t    \"in dataflow programming languages, involve acyclic networks of processing elements.\",\n\t\t\t    \"DAGs can also represent collections of events and their influence on each other, \",\n\t\t\t    \"either in a probabilistic structure such as a Bayesian network or as a record of\",\n\t\t\t    \"historical data such as family trees or the version histories of distributed \",\n\t\t\t    \"revision control systems. DAGs can also be used as a compact representation of \",\n\t\t\t    \"sequence data, such as the directed acyclic word graph representation of a \",\n\t\t\t    \"collection of strings, or the binary decision diagram representation of sequences \",\n\t\t\t    \"of binary choices. More abstractly, the reachability relation in a DAG forms a \",\n\t\t\t    \"partial order, and any finite partial order may be represented by a DAG using reachability.\",\n\t\t\t    \"Important polynomial time computational problems on DAGs include topological sorting \",\n\t\t\t    \"(finding a topological ordering), construction of the transitive closure and transitive\",\n\t\t\t    \"reduction (the largest and smallest DAGs with the same reachability relation, respectively), \",\n\t\t\t    \"and the closure problem, in which the goal is to find a minimum-weight subset of vertices with \",\n\t\t\t    \"no edges connecting them to the rest of the graph. Transforming a directed graph with cycles \",\n\t\t\t    \"into a DAG by deleting as few vertices or edges as possible (the feedback vertex set and \",\n\t\t\t    \"feedback edge set problem, respectively) is NP-hard, but any directed graph can be made \",\n\t\t\t    \"into a DAG (its condensation) by contracting each strongly connected component into a \",\n\t\t\t    \"single supervertex. The problems of finding shortest paths and longest paths can be \",\n\t\t\t    \"solved on DAGs in linear time, in contrast to arbitrary graphs for which shortest path \",\n\t\t\t    \"algorithms are slower and longest path problems are NP-hard.\",\n\t\t\t    \"The corresponding concept for undirected graphs is a forest, an undirected graph without \",\n\t\t\t    \"cycles. Choosing an orientation for a forest produces a special kind of directed acyclic graph\",\n\t\t\t    \"called a polytree. However there are many other kinds of directed acyclic graph that are not\"]\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - small wc",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple-eval\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"split\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                 \"#@flowInput.text\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function split(input) {\",\n                     \"return input[0].split(' ');\",\n                \"}\"]}\n        },\n        {\n            \"nodeName\": \"reduce\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"*@split\"\n            ],\n            \"extraData\":{\n               \"code\": [\n           \t    \"function reduce(input) {\",\n                   \"return input[0].reduce((all, word) => { \",\n                         \"if (word in all) {\",\n                      \t    \"all[word]++;\",\n                      \t\"}\",\n                      \t\"else {\",\n                      \t\t\"all[word] = 1;\",\n                      \t\"}\",\n                      \t\"return all;\",\n                      \"}, {});\",\n                   \"}\"\n            ]}\n        },\n        {\n            \"nodeName\": \"count\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@reduce\"\n            ],\n             \"extraData\":{\n                \"code\": [\n          \t    \"function count(input) {\",\n          \t        \"let dict = {}\",\n          \t        \"input[0].forEach(r => {\",\n          \t           \"Object.entries(r).forEach(([k, v]) => {\",\n                          \"if (!dict[k]) {\",\n                              \"dict[k] = 0;\",\n                           \"}\",\n                           \"dict[k] += v\",\n                           \"});\",\n                        \"});\",\n                       \"return dict\",\n          \t       \"}\"\n            ]}\n             \n        }\n    ],\n    \"flowInput\": {\n        \"text\": [\"In mathematics and computer science, a directed acyclic graph \",\n\t\t\t    \"edges, with each edge directed from one vertex to another, \",\n\t\t\t    \"such that there is no way to start at any vertex v and follow\"]\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - even odd",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple-eval\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"even\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                 \"#@flowInput.nums\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function split(input) {\",\n            \t     \"console.log('--------  TEST -------')\",\n                     \"return (input[0][0] + input[0][1]) % 2 === 0\",\n            \"}\"]}\n        },\n        {\n            \"nodeName\": \"reduce\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@even\"\n            ],\n            \"extraData\":{\n               \"code\": [\n           \t    \"function reduce(input) {\",\n                   \"return input[0].filter(r => r === true)\",\n                 \"}\"\n            ]}\n        }\n    ],\n    \"flowInput\": {\n        \"nums\": [[1,2],[3,4]]\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - count letters",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple-eval\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"text\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                 \"@flowInput.text\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function split(input) {\",\n            \t      \"return input[0].split(' ');\",\n            \"}\"]}\n        },\n        {\n            \"nodeName\": \"count\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"#@text\"\n            ],\n            \"extraData\":{\n               \"code\": [\n           \t    \"function reduce(input) {\",\n                   \"return Array.from(input[0]).filter(r => r === 'a').length\",\n                 \"}\"\n            ]}\n        }\n    ],\n    \"flowInput\": {\n        \"text\": \"In aaaaaaaa computer science, a directed acyclic graph, In mathematics and computer science, a directed acyclic graph, In mathematics and computer science, a directed acyclic graph\"\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/raw - eval calc",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"multadd\",\n    \"nodes\": [\n    \t        {\n            \"nodeName\": \"evalmul\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@flowInput.addInput\",\n                \"@flowInput.multInput\"\n            ],\n            \"extraData\": {\n                \"code\": [\n                    \"(input) => {\",\n                    \"const result = input[0] * input[1]\",\n                    \"return result;}\"\n                ]\n            }\n        },\n        {\n            \"nodeName\": \"evaladd\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@flowInput.addInput\",\n                \"@evalmul\"\n            ],\n            \"extraData\": {\n                \"code\": [\n                    \"(input) => {\",\n                    \"const result = input[0] + input[1]\",\n                    \"return result;}\"\n                ]\n            }\n        }\n    ],\n    \"options\": {\n        \"batchTolerance\": 60,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"priority\": 3,\n    \"flowInput\": {\n        \"addInput\":  3,\n        \"multInput\": 5\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "stress",
			"item": [
				{
					"name": "/exec/stored - stress",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a638dd49-6c44-451f-a9a8-b477faa3199a",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"stress\",\n  \"nodes\": [\n  {\n      \"nodeName\": \"eval\",\n      \"algorithmName\": \"eval-alg\",\n      \"input\": [1, 3, false, \"#[0...3]\", true]\n  }],\n  \"webhooks\": {\n        \"progress\": \"http://monitor-server:30010/webhook/progress\",\n        \"result\": \"http://monitor-server:30010/webhook/result\"\n    },\n  \"options\": {\n     \"batchTolerance\": 100,\n     \"progressVerbosityLevel\": \"debug\"\n  }\n}\n"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/stored - stress (300)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"stress\",\n  \"nodes\": [\n  {\n      \"nodeName\": \"stress-node\",\n      \"algorithmName\": \"eval-alg\",\n      \"input\": [\"#[0...100]\"]\n  }],\n  \"options\": {\n     \"batchTolerance\": 100,\n     \"progressVerbosityLevel\": \"debug\"\n  }\n}\n"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/stored - eval (1000)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"primecheck\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"prime\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                [\n                    \"(input,require) => {\",\n                    \"var num=input[0]\",\n                    \"if (num == 1) {\",\n                    \"return num + ' not prime';}\",\n                    \"else if (num == 2) {\",\n                    \"return num + ' prime';}\",\n                    \"else {\",\n                    \"for (var x = 2; x < num; x++) {\",\n                    \"if (num % x == 0) {\",\n                    \"return num + ' not prime';}}\",\n                    \"return num + ' prime';}}\"\n                ],\n                \"#@flowInput.nums\"\n            ]\n        }\n    ],\n    \"flowInput\": {\n        \"nums\": [\n            1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n             1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n            1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n             1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n            1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n             1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n            1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n             1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n            1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n             1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n            1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n             1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n            1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n             1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299\n        ]\n    },\n    \"webhooks\": {\n        \"progress\": \"http://10.42.128.80:3002/webhook/progress\",\n        \"result\": \"http://10.42.128.80:3002/webhook/result\"\n    },\n    \"options\": {\n        \"batchTolerance\": 60,\n        \"progressVerbosityLevel\": \"info\"\n    },\n    \"priority\": 3\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "stop",
			"item": [
				{
					"name": "/exec/stop - latest",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"reason\": \"cancel from postman\"\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stop",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stop"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "status",
			"item": [
				{
					"name": "/exec/status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/exec/status/{{jobId}}?",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"status",
								"{{jobId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/pipelines/status/raw",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/exec/pipelines/status/raw/raw-simple?sort=desc&order=mod&limit=50",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"pipelines",
								"status",
								"raw",
								"raw-simple"
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								},
								{
									"key": "order",
									"value": "mod"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/pipelines/status/stored",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/exec/pipelines/status/stored/evalwait?sort=asc&order=mod&limit=1000",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"pipelines",
								"status",
								"stored",
								"evalwait"
							],
							"query": [
								{
									"key": "sort",
									"value": "asc"
								},
								{
									"key": "order",
									"value": "mod"
								},
								{
									"key": "limit",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/cron/status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/exec/cron/status/simple_trigger?sort=desc&order=mod&limit=5",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"cron",
								"status",
								"simple_trigger"
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								},
								{
									"key": "order",
									"value": "mod"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "result",
			"item": [
				{
					"name": "/exec/results",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/exec/results/{{jobId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"results",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/cron/results",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/exec/cron/results/simple_trigger?sort=desc&order=mod&limit=5",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"cron",
								"results",
								"simple_trigger"
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								},
								{
									"key": "order",
									"value": "mod"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/pipelines/results/raw",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/exec/pipelines/results/raw/simple?sort=desc&order=mod&limit=50",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"pipelines",
								"results",
								"raw",
								"simple"
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								},
								{
									"key": "order",
									"value": "mod"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/exec/pipelines/results/stored",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/exec/pipelines/results/stored/trigger?sort=desc&order=mod&limit=5",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"pipelines",
								"results",
								"stored",
								"trigger"
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								},
								{
									"key": "order",
									"value": "mod"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "store",
			"item": [
				{
					"name": "/store/pipelines",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/store/pipelines",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"pipelines"
							]
						}
					},
					"response": []
				},
				{
					"name": "/store/pipelines/<name>",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/store/pipelines/simple trigger",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"pipelines",
								"simple trigger"
							]
						}
					},
					"response": []
				},
				{
					"name": "/store/pipelines",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"name\": \"trigger-3\",\n        \"nodes\": [\n            {\n                \"nodeName\": \"green\",\n                \"algorithmName\": \"green-alg\",\n                \"input\": [\n                    \"@flowInput\"\n                ]\n            },\n            {\n                \"nodeName\": \"yellow\",\n                \"algorithmName\": \"yellow-alg\",\n                \"input\": [\n                    \"@green\"\n                ]\n            },\n            {\n                \"nodeName\": \"black\",\n                \"algorithmName\": \"black-alg\",\n                \"input\": [\n                    \"@yellow\"\n                ]\n            }\n        ],\n        \"flowInput\": {\n            \"files\": {\n                \"link\": \"links-1\"\n            }\n        },\n        \"triggers\": {\n            \"pipelines\": [\n                \"trigger-2\"\n            ],\n            \"cron\": {\n                \"enabled\": true,\n                \"pattern\": \"0 * * * *\"\n            }\n        },\n        \"options\": {\n            \"batchTolerance\": 100,\n            \"progressVerbosityLevel\": \"debug\",\n            \"ttl\": 3600\n        },\n        \"webhooks\": {\n            \"progress\": \"http://localhost:3003/webhook/progress\",\n            \"result\": \"http://localhost:3003/webhook/result\"\n        },\n        \"priority\": 3\n    }"
						},
						"url": {
							"raw": "{{url}}/store/pipelines",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"pipelines"
							]
						}
					},
					"response": []
				},
				{
					"name": "/store/pipelines/<name>",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/store/pipelines/trigger1",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"pipelines",
								"trigger1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/store/pipelines",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n        \"name\": \"trigger-cron2\",\n        \"nodes\": [\n            {\n                \"nodeName\": \"green\",\n                \"algorithmName\": \"green-alg\",\n                \"input\": [\n                    \"@flowInput\"\n                ]\n            },\n            {\n                \"nodeName\": \"yellow\",\n                \"algorithmName\": \"yellow-alg\",\n                \"input\": [\n                    \"@green\"\n                ]\n            },\n            {\n                \"nodeName\": \"black\",\n                \"algorithmName\": \"black-alg\",\n                \"input\": [\n                    \"@yellow\"\n                ]\n            }\n        ],\n        \"flowInput\": {\n            \"files\": {\n                \"link\": \"links-1\"\n            }\n        },\n        \"triggers\": {\n             \"cron\": {\n                 \"pattern\": \"20,40 * * * * 0,1,2\"\n             }\n        },\n        \"options\": {\n            \"batchTolerance\": 100,\n            \"progressVerbosityLevel\": \"debug\",\n            \"ttl\": 3600\n        },\n        \"webhooks\": {\n            \"progress\": \"http://localhost:3003/webhook/progress\",\n            \"result\": \"http://localhost:3003/webhook/result\"\n        },\n        \"priority\": 3\n    }"
						},
						"url": {
							"raw": "{{url}}/store/pipelines",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"pipelines"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "algorithms",
			"item": [
				{
					"name": "/store/algorithms",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/store/algorithms",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"algorithms"
							]
						}
					},
					"response": []
				},
				{
					"name": "/store/algorithms/<name>",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/store/algorithms/sort-alg",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"algorithms",
								"sort-alg"
							]
						}
					},
					"response": []
				},
				{
					"name": "/store/algorithms",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"name\": \"python-alg\",\n        \"env\": \"python\",\n        \"code\": {\n            \"checksum\": \"455b289e1ede02c0b5dfc26ae60d0ada\",\n            \"fileSize\": 456,\n            \"entryPoint\": \"main.py\"\n        },\n        \"algorithmImage\": \"hkube/python-alg:v1.0.0\",\n        \"cpu\": 0.1,\n        \"mem\": \"512Mi\",\n        \"algorithmEnv\": {\n            \"ALGORITHM_ENTRY_POINT\": \"main.py\"\n        },\n        \"workerEnv\": {\n            \"WORKER_ALGORITHM_PROTOCOL\": \"ws\"\n        },\n        \"minHotWorkers\": 0,\n        \"userInfo\": {\n            \"platform\": \"linux\",\n            \"hostname\": \"ubuntu-hareln-ww\",\n            \"username\": \"harelh\"\n        },\n        \"options\": {\n            \"debug\": false\n        },\n        \"nodeSelector\": {\n            \"kubernetes.io/hostname\": \"node1\"\n        }\n    }"
						},
						"url": {
							"raw": "{{url}}/store/algorithms",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"algorithms"
							]
						}
					},
					"response": []
				},
				{
					"name": "/store/algorithms/<name>",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/store/algorithms/eval-hot",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"algorithms",
								"eval-hot"
							]
						}
					},
					"response": []
				},
				{
					"name": "/store/algorithms",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"name\": \"0\",\n        \"algorithmImage\": \"hkube/algorunner\",\n        \"cpu\": 1,\n        \"mem\": \"512Mi\",\n        \"minHotWorkers\": 0,\n        \"options\": {\n            \"debug\": false\n        }\n  }"
						},
						"url": {
							"raw": "{{url}}/store/algorithms",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"algorithms"
							]
						}
					},
					"response": []
				},
				{
					"name": "/store/algorithms/apply",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "payload",
									"value": "",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file"
								}
							]
						},
						"url": {
							"raw": "{{url}}/store/algorithms",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"algorithms"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "webhooks",
			"item": [
				{
					"name": "/webhooks/results",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/webhooks/results/{{jobId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"webhooks",
								"results",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/webhooks/status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/webhooks/status/{{jobId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"webhooks",
								"status",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/webhooks/",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{url}}/webhooks/{{jobId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"webhooks",
								"{{jobId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "test",
			"item": [
				{
					"name": "/exec/raw - DAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"DAG\",\n    \"nodes\": [{\n            \"nodeName\": \"A\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [1, \"@flowInput.timeout\"],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t\"return new Promise((resolve,reject) => {\",\n\t\t          \t\"setTimeout(() => \",\n\t\t          \t   \"resolve(input[0] * 2)\",\n\t\t          \t\",input[1])\",\n            \t\t\t\"});\",\n                   \"}\"]}\n        },\n        {\n            \"nodeName\": \"B\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\"@A\", \"@flowInput.timeout\"],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t\"return new Promise((resolve,reject) => {\",\n\t\t          \t\"setTimeout(() => \",\n\t\t          \t   \"resolve(input[0] * 2)\",\n\t\t          \t\",input[1])\",\n            \t\t\t\"});\",\n                   \"}\"]}\n        },\n        {\n            \"nodeName\": \"C\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\"@B\", \"@flowInput.timeout\"],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t\"return new Promise((resolve,reject) => {\",\n\t\t          \t\"setTimeout(() => \",\n\t\t          \t   \"resolve(input[0] * 2)\",\n\t\t          \t\",input[1])\",\n            \t\t\t\"});\",\n                   \"}\"]}\n        },\n        {\n            \"nodeName\": \"D\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\"@B\", \"@G\", \"@flowInput.timeout\"],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t\"return new Promise((resolve,reject) => {\",\n\t\t          \t\"setTimeout(() => \",\n\t\t          \t   \"resolve(input[0] * 2)\",\n\t\t          \t\",input[2])\",\n            \t\t\t\"});\",\n                   \"}\"]}\n        },\n        {\n            \"nodeName\": \"E\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\"@B\", \"@C\", \"@D\", \"@flowInput.timeout\"],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t\"return new Promise((resolve,reject) => {\",\n\t\t          \t\"setTimeout(() => \",\n\t\t          \t   \"resolve(input[0] * 2)\",\n\t\t          \t\",input[3])\",\n            \t\t\t\"});\",\n                   \"}\"]}\n        },\n        {\n            \"nodeName\": \"F\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\"@E\", \"@flowInput.timeout\"],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t\"return new Promise((resolve,reject) => {\",\n\t\t          \t\"setTimeout(() => \",\n\t\t          \t   \"resolve(input[0] * 2)\",\n\t\t          \t\",input[1])\",\n            \t\t\t\"});\",\n                   \"}\"]}\n        },\n        {\n            \"nodeName\": \"G\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [1, \"@flowInput.timeout\"],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function sum(input) {\",\n            \t\"return new Promise((resolve,reject) => {\",\n\t\t          \t\"setTimeout(() => \",\n\t\t          \t   \"resolve(input[0] * 2)\",\n\t\t          \t\",input[1])\",\n            \t\t\t\"});\",\n                   \"}\"]}\n        }],\n    \"flowInput\": {\n        \"timeout\": 5000\n    }\n\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}