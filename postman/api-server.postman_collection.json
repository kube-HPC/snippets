{
	"info": {
		"_postman_id": "bdce04cd-e27e-f723-734c-8bde104a89a4",
		"name": "api-server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"_postman_id": "c679b412-97e3-4c99-ab09-169a7928f1d0",
			"name": "exec",
			"item": [
				{
					"_postman_id": "ba086804-5abf-44a5-b524-fe28db77f3f0",
					"name": "/exec/pipeline",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"execution_id\": \"{{execution_id}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/exec/pipeline/{{jobId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"pipeline",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "69e9658a-fafd-46ae-a728-a2aa052dc7de",
					"name": "/exec/tree",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"execution_id\": \"{{execution_id}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/exec/tree/{{jobId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"tree",
								"{{jobId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "b52f820b-2dc6-4dac-80f1-43c10377cbdd",
			"name": "exec raw",
			"item": [
				{
					"_postman_id": "d148a9c5-53bc-495b-b894-cdc0bf007fb3",
					"name": "/exec/raw - simple",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\n                \"@flowInput.files.link\"\n            ]\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"yellow-alg\",\n            \"input\": [\n                \"@green\"\n            ]\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"black-alg\",\n            \"input\": [\n                \"@yellow\"\n            ]\n        }\n    ],\n    \"flowInput\": {\n        \"files\": {\n            \"link\": \"links-1\"\n        }\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "3321c685-f9c8-461c-a2a8-235604053cd6",
					"name": "/exec/raw - DAG",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"DAG\",\n        \"nodes\": [{\n            \"nodeName\": \"A\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\"data\"]\n        },\n        {\n            \"nodeName\": \"B\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\"@A\"]\n        },\n        {\n            \"nodeName\": \"C\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\"@B\"]\n        },\n        {\n            \"nodeName\": \"D\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\"@B\", \"@G\"]\n        },\n        {\n            \"nodeName\": \"E\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\"@B\", \"@C\", \"@D\"]\n        },\n        {\n            \"nodeName\": \"F\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\"@E\"]\n        },\n        {\n            \"nodeName\": \"G\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\"data\"]\n        }]\n\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "afc6f2a4-f6d9-40d7-9d3c-48920ff4e2a0",
					"name": "/exec/raw - simple trigger",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\n                \"@flowInput.files.link\"\n            ]\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"yellow-alg\",\n            \"input\": [\n                \"@green\"\n            ]\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"black-alg\",\n            \"input\": [\n                \"@yellow\"\n            ]\n        }\n    ],\n    \"flowInput\": {\n        \"files\": {\n            \"link\": \"links-1\"\n        }\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"triggers\": {\n        \"pipelines\": [\"simple_trigger\"],\n        \"cron\": \"1 * * * * *\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "db025daa-e8e6-4255-85de-46629b835834",
					"name": "/exec/raw - cpu-load",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"cpu\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"cpu-load\",\n            \"input\": [{\n            \t\"cpu\": 4,\n            \t\"duration\": 20\n            }]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "2fa99b57-31dd-4a47-bc61-50e03a602508",
					"name": "/exec/raw - simple triggered",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple_trigger\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\n                \"@flowInput\"\n            ]\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"yellow-alg\",\n            \"input\": [\n                \"@green\"\n            ]\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"black-alg\",\n            \"input\": [\n                \"@yellow\"\n            ]\n        }\n    ],\n    \"flowInput\": {\n        \"files\": {\n            \"link\": \"links-1\"\n        }\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "c552cd65-7a30-42a9-b324-aac2f2816519",
					"name": "/exec/raw - batch triggered",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"batch_trigger\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\n                \"#@flowInput.files.links\"\n            ]\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"yellow-alg\",\n            \"input\": [\n                \"@green\"\n            ]\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"black-alg\",\n            \"input\": [\n                \"@yellow\"\n            ]\n        }\n    ],\n    \"flowInput\": {\n        \"files\": {\n            \"links\": [\n                \"links-1\",\n                \"links-2\",\n                \"links-3\",\n                \"links-4\",\n                \"links-5\"\n            ]\n        }\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "e85a1479-979f-4b3f-a6e3-dfb4a3522df4",
					"name": "/exec/raw - apak-batch-crash-test",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"apak-batch-crash-test\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"eval1\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"@flowInput.range\"\n           ],\n           \"extraData\":{\n               \"code\":[\n                   \"(input) => {\",\n                   \"const range = Array.from(Array(input[0]).keys());\",\n                   \"return range }\"\n\n                   ]\n           }\n       },\n       {\n           \"nodeName\": \"apak\",\n           \"algorithmName\": \"red-alg\",\n           \"input\": [\n               {\n                       \"SessionGuid\": \"#@eval1\",\n                       \"SessionFilePath\": \"http://10.32.10.24:9000/apak-data/test1.wav\",\n                       \"SpeakerId\": \"1\",\n                       \"output_file_path\":\"/ApakMCR/example_input_output/out0.csv\"\n                  \n                }\n             \n           ]\n       }\n   ],\n   \"flowInput\": {\n       \"range\":1\n   },\n   \"options\": {\n       \"batchTolerance\": 100,\n       \"progressVerbosityLevel\": \"debug\"\n   },\n   \"webhooks\": {\n       \"progress\": \"http://webhook-stub-ui:3002/webhook/progress\",\n       \"result\": \"http://webhook-stub-ui:3002/webhook/result\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "be0be9a1-cbe1-4edf-bef1-595ebfb57130",
					"name": "/exec/raw - crazy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"crazy\",\n    \"nodes\": [\n    \t{\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\n                \"#@flowInput.files.green\"\n            ]\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"yellow-alg\",\n            \"input\": [\n                \"#@flowInput.files.yellow\"\n            ]\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"black-alg\",\n            \"input\": [\n            \t\"*@green\",\n                \"@green\",\n                \"*@yellow\",\n                \"@yellow\"\n            ]\n        }\n    ],\n    \"flowInput\": {\n        \"files\": {\n            \"green\": [\n                \"links-1\",\n                \"links-2\",\n                \"links-3\",\n                \"links-4\",\n                \"links-5\"\n            ],\n            \"yellow\": [\n                \"links-6\",\n                \"links-7\",\n                \"links-8\",\n                \"links-9\",\n                \"links-10\"\n            ]\n        }\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "e25810cf-3bc0-4cd7-af18-e3373f571acf",
					"name": "/exec/raw - crazy red",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"crazy\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"black\",\n           \"algorithmName\": \"black-alg\",\n           \"input\": [\n               \"@green\",\n               \"@yellow\",\n               \"*@red\"\n           ]\n       },\n       {\n           \"nodeName\": \"green\",\n           \"algorithmName\": \"green-alg\",\n           \"input\": [\n               \"@flowInput.files.green\"\n           ]\n       },\n       {\n           \"nodeName\": \"yellow\",\n           \"algorithmName\": \"yellow-alg\",\n           \"input\": [\n               \"@flowInput.files.yellow\"\n           ]\n       },\n        {\n           \"nodeName\": \"red\",\n           \"algorithmName\": \"red-alg\",\n           \"input\": [\n               \"#@flowInput.files.red\"\n           ]\n       }\n   ],\n   \"flowInput\": {\n       \"files\": {\n           \"green\": [\n               \"links-1\",\n               \"links-2\",\n               \"links-3\",\n               \"links-4\",\n               \"links-5\"\n           ],\n           \"yellow\": [\n               \"links-6\",\n               \"links-7\",\n               \"links-8\",\n               \"links-9\",\n               \"links-10\"\n           ],\n            \"red\": [\n               \"links-6\",\n               \"links-7\",\n               \"links-8\",\n               \"links-9\",\n               \"links-10\"\n           ]\n       }\n   },\n   \"options\": {\n       \"batchTolerance\": 100,\n       \"progressVerbosityLevel\": \"debug\"\n   },\n   \"webhooks\": {\n       \"progress\": \"http://localhost:3003/webhook/progress\",\n       \"result\": \"http://localhost:3003/webhook/result\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "ebb57f09-fc7f-404d-91ff-38271f0d6f1b",
					"name": "/exec/raw - crazy copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"evalWaitAny\",\n  \"nodes\": [\n    {\n      \"nodeName\": \"evalsleep\",\n      \"algorithmName\": \"eval-alg\",\n      \"input\": [\n        \"#@flowInput.inputs\"\n      ],\n      \"extraData\": {\n        \"code\": [\n          \"(input,require)=> {\",\n          \"return new Promise((resolve,reject)=>{setTimeout(()=>resolve(input[0][1]),input[0][0])});}\"\n        ]\n      }\n    }\n  ],\n  \"options\": {\n    \"batchTolerance\": 80,\n    \"progressVerbosityLevel\": \"info\"\n  },\n  \"priority\": 3,\n  \"flowInput\": {\n    \"inputs\": [\n      [\n        1000,\n        5\n      ],\n      [\n        2000,\n        12\n      ],\n      [\n        3000,\n        87\n      ],\n      [\n        4000,\n        125\n      ]\n    ],\n    \"inputsadd\": [\n      3,\n      5,\n      6,\n      89\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "b90346be-f9bd-4d6f-b2e3-3b14efecb5f5",
					"name": "/exec/stored - complex-wait-any",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"complex-wait-any\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"[1...11]\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"(input) => {\",\n                     \"return input[0]\",\n                \"}\"]\n            }\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"[11...21]\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"(input) => {\",\n                     \"return input[0]\",\n                \"}\"]\n            }\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@green\",\n                \"@yellow\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"(input) => {\",\n            \t     \"if(input[2] % 2 === 0) { \",\n            \t    \t\t\"throw new Error('no even numbers')\",\n            \t     \"}\",\n            \t     \"const arr = input[0].concat(input[1])\",\n                     \"arr.push([input[2], input[3]])\",\n                     \"return arr\",\n                \"}\"]\n            }\n        }\n    ],\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "e053f6ec-90ef-4e2a-9eb9-90c704cfed15",
					"name": "/exec/stored - complex-wait-any Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"complex-wait-any\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"#[1...11]\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"(input) => {\",\n                     \"return input[0]\",\n                \"}\"]\n            }\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"#[11...21]\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"(input) => {\",\n                     \"return input[0]\",\n                \"}\"]\n            }\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@green\",\n                \"@yellow\",\n                \"*@green\",\n                \"*@yellow\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"(input) => {\",\n            \t     \"if(input[2] % 2 === 0) { \",\n            \t    \t\t\"throw new Error('no even numbers')\",\n            \t     \"}\",\n            \t     \"const arr = input[0].concat(input[1])\",\n                     \"arr.push([input[2], input[3]])\",\n                     \"return arr\",\n                \"}\"]\n            }\n        }\n    ],\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "62a62da7-56e6-4477-9b31-aa93c87e4741",
					"name": "/exec/stored - double-wait-any",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"double-wait-any\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\n                \"#@flowInput.files.links\"\n            ]\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"yellow-alg\",\n            \"input\": [\n                \"#@flowInput.files.links\"\n            ]\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"black-alg\",\n            \"input\": [\n                \"*@green\",\n                \"*@yellow\"\n            ]\n        }\n    ],\n    \"flowInput\": {\n        \"files\": {\n            \"links\": [\n                \"links-1\",\n                \"links-2\",\n                \"links-3\"\n            ]\n        }\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "69ef572a-dd03-4935-a4dd-f9be4876c911",
					"name": "/exec/stored - simple-wait-any",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple-wait-any\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\n                \"#@flowInput.files.links\"\n            ]\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"black-alg\",\n            \"input\": [\n                \"*@green\"\n            ]\n        }\n    ],\n    \"flowInput\": {\n        \"files\": {\n            \"links\": [\n                \"links-1\",\n                \"links-2\",\n                \"links-3\"\n            ]\n        }\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "0b27c873-7091-419e-aeff-03747d6332d2",
					"name": "/exec/raw - batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"batch\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"green\",\n           \"algorithmName\": \"green-alg\",\n           \"input\": [\n               \"#@flowInput.files.links\"\n           ]\n       },\n       {\n           \"nodeName\": \"yellow\",\n           \"algorithmName\": \"green-alg\",\n           \"input\": [\n               \"@green\"\n           ]\n       },\n       {    \n           \"nodeName\": \"black\",\n           \"algorithmName\": \"green-alg\",\n           \"input\": [\n               \"@yellow\"\n           ]\n       }\n   ],\n   \"flowInput\": {\n       \"files\": {\n           \"links\": [\n               \"links-1\",\n               \"links-2\",\n               \"links-3\",\n               \"links-4\",\n               \"links-5\",\n               \"links-6\",\n               \"links-7\",\n               \"links-8\",\n               \"links-9\",\n               \"links-1\",\n               \"links-2\",\n               \"links-3\",\n               \"links-4\",\n               \"links-5\",\n               \"links-6\",\n               \"links-7\",\n               \"links-8\",\n               \"links-9\",\n               \"links-10\"\n           ]\n       }\n   },\n   \"options\": {\n       \"batchTolerance\": 100,\n       \"progressVerbosityLevel\": \"debug\"\n   },\n   \"webhooks\": {\n       \"progress\": \"http://localhost:3003/webhook/progress\",\n       \"result\": \"http://localhost:3003/webhook/result\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "628a3d4d-1881-427b-b53f-ffaffddec2b7",
					"name": "/exec/raw - batch on node",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"batch-on-node\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\n                \"@flowInput.files.links\"\n            ]\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"yellow-alg\",\n            \"input\": [\n                \"#@green.data\"\n            ]\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"black-alg\",\n            \"input\": [\n                \"@yellow\"\n            ]\n        }\n    ],\n    \"flowInput\": {\n        \"files\": {\n            \"links\": [\n                \"links-1\",\n                \"links-2\",\n                \"links-3\",\n                \"links-4\",\n                \"links-5\"\n            ]\n        }\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "14cf6e17-2eb9-4542-b3e8-f6271b7f6788",
					"name": "/exec/raw - big-batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"big-batch\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\n                \"#[0...10]\"\n            ]\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"yellow-alg\",\n            \"input\": [\n            \t\"#[0...10]\"\n            ]\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"black-alg\",\n            \"input\": [\n            \t\"#[0...10]\"\n            ]\n        }\n    ],\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "85d226c3-ad4b-4520-9c03-6184886bea40",
					"name": "/exec/raw - batch input",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"big-batch\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"yellow-alg\",\n            \"input\": [\n                \"#[1,2,3,4,5]\"\n            ]\n        }\n    ],\n    \"options\": {\n        \"batchTolerance\": 0,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "aca86184-2b14-4b5f-97ee-045444130a6b",
					"name": "/exec/raw - big-wait-batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"big-wait-batch\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\n                \"#@flowInput.files.links\"\n            ]\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"yellow-alg\",\n            \"input\": [\n                 \"#@flowInput.files.links\"\n            ]\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"black-alg\",\n            \"input\": [\n            \t\"@green\",\n                \"@yellow\"\n            ]\n        }\n    ],\n    \"flowInput\": {\n        \"files\": {\n            \"links\": [\n                \"links-1\",\n                \"links-2\",\n                \"links-3\"\n            ]\n        }\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "e36f60b7-6fe3-4ebb-bb72-85ea297516a8",
			"name": "exec stored",
			"item": [
				{
					"_postman_id": "51ea2402-3564-4d89-9fd6-40cf0b997b27",
					"name": "/exec/stored - simple",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple\"\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "4d9e5c44-b1f3-4f8c-b91b-096bd6d37d7a",
					"name": "/exec/stored - simple Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"evalWaitAny\",\n    \"flowInput\": {\n        \"inputs\": [\n            [\n                10000,\n                5\n            ],\n            [\n                5000,\n                12\n            ],\n            [\n                15000,\n                87\n            ],\n            [\n                7000,\n                125\n            ]\n        ],\n        \"inputsadd\": [\n            3\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "f950aff9-60b6-4802-98cc-56929515919f",
					"name": "/exec/stored - simple trigger",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa6cae4e-de57-4b16-8e63-5a4fa403ea50",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"trigger1\"\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "a0c13fb4-6902-48e0-a97d-8edc586c9ae3",
					"name": "/exec/stored - batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"batch\",\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "122d4573-c664-4840-a86b-18b4c3bcf684",
					"name": "/exec/stored - big-batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"big-batch\",\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "33e63f21-58a6-4dec-992f-92fe152fe554",
					"name": "/exec/stored - trigger",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple_trigger\"\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "2fcb15dd-2c05-4b37-abdf-e3b182e6ce77",
					"name": "/exec/stored - big-wait-batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"big-wait-batch\",\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "71c559b4-67e6-4a07-a9c7-bf7e5df141a0",
					"name": "/exec/stored - wait-any-batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"wait-any-batch\",\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "c86ca1c2-9fbf-4ec9-9f18-0c3b0b97e7b3",
					"name": "/exec/stored - batch-on-node",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"batch-on-node\",\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "ee0b790c-567a-4ad0-ba05-fd65411fbe1f",
					"name": "/exec/stored - simple-wait-batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple-wait-batch\",\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "40eec0b1-66e0-44d5-851f-4ce1f9942698",
					"name": "/exec/stored - simple-eval",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple-eval\",\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stored",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "67012115-ed74-4465-8d47-63fca41da04a",
			"name": "internal",
			"item": [
				{
					"_postman_id": "27b20e94-9c6e-4637-b544-fdab62fdfe4f",
					"name": "/pods",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"execution_id\": \"{{execution_id}}\"\n}"
						},
						"url": {
							"raw": "{{monitorUrl}}/{{jobId}}?",
							"host": [
								"{{monitorUrl}}"
							],
							"path": [
								"{{jobId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "d96ad213-8b48-48d0-80fa-6afa932ad27a",
					"name": "/algorithms/queue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b907183-ebeb-4b6a-8ec9-48c483a9e1aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple\",\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{internalUrl}}/algorithms/queue",
							"host": [
								"{{internalUrl}}"
							],
							"path": [
								"algorithms",
								"queue"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "0a9bb8e2-f425-4072-b460-4372eac77375",
					"name": "/executions/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b907183-ebeb-4b6a-8ec9-48c483a9e1aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple\",\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/executions/list",
							"host": [
								"{{url}}"
							],
							"path": [
								"executions",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "f67f842f-2f3f-477a-a24b-4c314267eb82",
					"name": "/exec/stored",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a72a99ec-d662-4c59-90fd-76bd6c539990",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple\",\n    \"jobId\": \"stam\",\n    \"type\": \"stored\"\n}"
						},
						"url": {
							"raw": "{{internalUrl}}/exec/stored",
							"host": [
								"{{internalUrl}}"
							],
							"path": [
								"exec",
								"stored"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "d4ff3365-00ec-44e3-96b8-176be4772874",
					"name": "/exec/clean",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a72a99ec-d662-4c59-90fd-76bd6c539990",
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);",
									"",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jobId\": \"simple:d35cca12-22e0-4b1d-aaf4-392b9066b0bc.simple\"\n}"
						},
						"url": {
							"raw": "{{internalUrl}}/exec/clean",
							"host": [
								"{{internalUrl}}"
							],
							"path": [
								"exec",
								"clean"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "f858f913-56e0-4f7a-9277-ed9bea29dc91",
			"name": "eval",
			"item": [
				{
					"_postman_id": "9be41d97-06d1-40a4-b1ce-2c6d21a258b8",
					"name": "/exec/raw - test",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple-eval\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"split\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                 \"#@flowInput.text\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function split(input) {\",\n                     \"return input[0].split(' ');\",\n                \"}\"]}\n        },\n        {\n            \"nodeName\": \"reduce\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"*@split\"\n            ],\n            \"extraData\":{\n               \"code\": [\n           \t    \"function reduce(input) {\",\n                   \"return input[0].reduce((all, word) => { \",\n                         \"if (word in all) {\",\n                      \t    \"all[word]++;\",\n                      \t\"}\",\n                      \t\"else {\",\n                      \t\t\"all[word] = 1;\",\n                      \t\"}\",\n                      \t\"return all;\",\n                      \"}, {});\",\n                   \"}\"\n            ]}\n        },\n        {\n            \"nodeName\": \"count\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@reduce\"\n            ],\n             \"extraData\":{\n                \"code\": [\n          \t    \"function count(input) {\",\n          \t        \"let dict = {}\",\n          \t        \"input[0].forEach(r => {\",\n          \t           \"Object.entries(r).forEach(([k, v]) => {\",\n                          \"if (!dict[k]) {\",\n                              \"dict[k] = 0;\",\n                           \"}\",\n                           \"dict[k] += v\",\n                           \"});\",\n                        \"});\",\n                       \"return dict\",\n          \t       \"}\"\n            ]}\n             \n        }\n    ],\n    \"flowInput\": {\n        \"text\": [\"In mathematics and computer science, a directed acyclic graph \",\n\t\t\t    \"(DAG (About this sound listen)), is a finite directed graph with\",\n\t\t\t    \" no directed cycles. That is, it consists of finitely many vertices and\",\n\t\t\t    \"such that every edge is directed from earlier to later in the sequence.\",\n\t\t\t    \"DAGs can model many different kinds of information. \",\n\t\t\t    \"A spreadsheet can be modeled as a DAG, with a vertex \",\n\t\t\t    \"for each cell and an edge whenever the formula in one\"]\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "0365125d-6bb3-4e82-a0d4-4b303fd002aa",
					"name": "/exec/raw - countEven",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"countEven\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"even\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"*@flowInput.nums\"\n            ],\n            \"extraData\": {\n                \"code\": [\n                    \"function split(input) {\",\n                    \"if ((input[0][0] + input[0][1]) % 2 === 0) return true\",\n                    \"}\"\n                ]\n            }\n        }\n        \n    ],\n    \"options\": {\n        \"batchTolerance\": 60,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"priority\": 3,\n    \"flowInput\": {\n        \"nums\": [\n            [\n                2,\n                3\n            ],\n            [\n                3,\n                5\n            ],\n            [\n                4,\n               5\n            ],\n            [\n                676666,\n               5\n            ],\n            [\n                566,\n                2\n            ],\n            [\n                12335,\n                8989\n            ],\n            [\n                3,\n                3\n            ],\n            [\n                3,\n                3\n            ],\n            [\n                4,\n                4\n            ],\n            [\n                1,\n                1\n            ]\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "88d5c0cf-5e82-44f8-968c-33514644340d",
					"name": "/exec/raw - throw",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"countEven\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"even\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\"#[1...2]\"],\n            \"extraData\": {\n                \"code\": [\n                    \"function throwErr(input) {\",\n                        \"return new Promise((resolve,reject) => {\",\n                          \"setTimeout(() => {\",\n                              \"reject(new Error('ooppps'))\",\n                             \"}\",\n                           \", input[0] * 1000)\",\n                       \"});\",\n                    \"}\"\n                ]\n            }\n        }\n        \n    ],\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "bc96e001-0cea-4f5d-a9c2-f451ee746581",
					"name": "/exec/raw - eval demo",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"eval-demo\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"eval1\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"@flowInput.range\"\n           ],\n           \"extraData\":{\n             \"code\":[\n                   \"(input) => {\",\n                   \"const range = Array.from(Array(input[0]).keys());\",\n                   \"return range }\"\n\n               ]\n           }\n       },\n       {\n           \"nodeName\": \"eval2\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"#@eval1\"\n           ],\n           \"extraData\":{\n             \"code\":[\n                   \"(input) => {\",\n                   \"const result = input[0];\",\n                   \"return result }\"\n\n               ]\n           }\n       }\n   ],\n   \"flowInput\": {\n     \"range\":10\n   },\n   \"options\": {\n       \"batchTolerance\": 100,\n       \"progressVerbosityLevel\": \"debug\"\n   },\n   \"webhooks\": {\n       \"progress\": \"http://localhost:3003/webhook/progress\",\n       \"result\": \"http://localhost:3003/webhook/result\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "29d513f8-de28-43f8-9978-0b2136eb21c5",
					"name": "/exec/raw - eval wait",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"eval-wait\",\n  \"nodes\": [\n    {\n      \"nodeName\": \"evalsleep\",\n      \"algorithmName\": \"eval-alg\",\n      \"input\": [\n      \t\"#[0...1000]\",\n        \"@flowInput.inputs\"\n      ],\n      \"extraData\": {\n        \"code\": [\n          \"(input) => {\",\n          \"return new Promise((resolve,reject) => {\",\n          \t\"setTimeout(() => \",\n          \t   \"resolve(4)\",\n          \t\",input[1])\",\n             \"});\",\n           \"}\"\n        ]\n      }\n    }\n  ],\n  \"options\": {\n    \"batchTolerance\": 80,\n    \"progressVerbosityLevel\": \"info\"\n  },\n  \"priority\": 3,\n  \"flowInput\": {\n    \"inputs\": [\n      1000\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "bbfef71f-b52d-4684-badd-f4bef4465f4d",
					"name": "/exec/raw - eval wait copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"batch\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"green\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"#@flowInput.files.links\"\n           ],\n           \"extraData\":{\n             \"code\":[\n                   \"(input) => {\",\n                   \"const result = input[0];\",\n                   \"return result }\"\n\n               ]\n           }\n       }\n   ],\n   \"flowInput\": {\n       \"files\": {\n           \"links\": [\n               \"links-1\",\n               \"links-2\",\n               \"links-3\",\n               \"links-4\",\n               \"links-5\",\n               \"links-6\",\n               \"links-7\",\n               \"links-8\",\n               \"links-9\",\n               \"links-10\"\n           ]\n       }\n   },\n   \"options\": {\n       \"batchTolerance\": 100,\n       \"progressVerbosityLevel\": \"debug\"\n   },\n   \"webhooks\": {\n       \"progress\": \"http://localhost:3003/webhook/progress\",\n       \"result\": \"http://localhost:3003/webhook/result\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "e93ea194-8f2a-4bc9-b2cd-ccd2fb1285b9",
					"name": "/exec/raw eval - batch on node",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"eval-demo\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"eval1\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"@flowInput.range\"\n           ],\n           \"extraData\":{\n               \"code\":[\n                   \"(input) => {\",\n                   \"const range = Array.from(Array(input[0]).keys());\",\n                   \"return range }\"\n                   ]\n           }\n       },\n       {\n           \"nodeName\": \"eval2\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"#@eval1\"\n           ],\n           \"extraData\":{\n               \"code\":[\n                   \"(input) => {\",\n                   \"const result = input[0] * 2;\",\n                   \"return result }\"\n                   ]\n           }\n       }\n   ],\n   \"flowInput\": {\n       \"range\": 20\n   },\n   \"options\": {\n       \"batchTolerance\": 100,\n       \"progressVerbosityLevel\": \"debug\"\n   },\n   \"webhooks\": {\n       \"progress\": \"http://localhost:3003/webhook/progress\",\n       \"result\": \"http://localhost:3003/webhook/result\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "c5c67d7b-e2cd-4b23-8297-63f69011a47d",
					"name": "/exec/raw eval - batch on node copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"eval-demo\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"eval1\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"@flowInput.range\"\n           ],\n           \"extraData\":{\n               \"code\":[\n                   \"(input) => {\",\n                   \"const range = Array.from(Array(input[0]).keys());\",\n                   \"return {range: range, foo: 123} }\"\n                   ]\n           }\n       },\n       {\n           \"nodeName\": \"eval2\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"#@eval1.range\"\n           ],\n           \"extraData\":{\n               \"code\":[\n                   \"(input) => {\",\n                   \"const result = input[0] * 2;\",\n                   \"return result }\"\n                   ]\n           }\n       },\n        {\n           \"nodeName\": \"eval3\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n              \"@eval2\"\n           ],\n           \"extraData\":{\n               \"code\":[\n                   \"(input) => {\",\n                   \"const result = input[0];\",\n                   \"return result }\"\n                   ]\n           }\n       }\n   ],\n   \"flowInput\": {\n       \"range\": 5\n   },\n   \"options\": {\n       \"batchTolerance\": 100,\n       \"progressVerbosityLevel\": \"debug\"\n   },\n   \"webhooks\": {\n       \"progress\": \"http://localhost:3003/webhook/progress\",\n       \"result\": \"http://localhost:3003/webhook/result\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "07188c71-4739-43f2-ad18-7b5ef390b32c",
					"name": "/exec/raw eval - wait any batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"eval-demo\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"eval1\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"@flowInput.ranges\"\n           ],\n           \"extraData\":{\n               \"code\":[\n                   \"(input) => {\",\n                   \"const range = Array.from(Array(input[0][0]).keys());\",\n                   \"return range }\"\n                   ]\n           }\n       },\n       {\n           \"nodeName\": \"eval2\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"#@eval1\"\n           ],\n           \"extraData\":{\n               \"code\":[\n                   \"(input) => {\",\n                   \"const result = input[0] * 2;\",\n                   \"return result }\"\n                   ]\n           }\n       }\n   ],\n   \"flowInput\": {\n       \"ranges\": [100, 100, 100, 100, 100]\n   },\n   \"options\": {\n       \"batchTolerance\": 100,\n       \"progressVerbosityLevel\": \"debug\"\n   },\n   \"webhooks\": {\n       \"progress\": \"http://localhost:3003/webhook/progress\",\n       \"result\": \"http://localhost:3003/webhook/result\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "6b910cf8-4841-4c68-8d2a-b62161b85940",
					"name": "/exec/raw eval - double wait any",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"name\": \"eval-demo\",\n   \"nodes\": [\n       {\n           \"nodeName\": \"eval1\",\n           \"algorithmName\": \"eval-alg\",\n           \"input\": [\n               \"#[0...10]\"\n           ],\n           \"extraData\":{\n               \"code\":[\n                   \"(input) => {\",\n                   \"if(input[0] % 2 === 0) { throw new Error('no odd numbers') }\",\n                   \"return input[0] }\"\n                   ]\n           }\n       }\n   ],\n   \"options\": {\n       \"batchTolerance\": 100,\n       \"progressVerbosityLevel\": \"debug\"\n   },\n   \"webhooks\": {\n       \"progress\": \"http://localhost:3003/webhook/progress\",\n       \"result\": \"http://localhost:3003/webhook/result\"\n   }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "26654df5-f599-43e9-a083-4ec142ed3ac7",
					"name": "/exec/raw eval - countEven",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"countEven\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"even\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"#@flowInput.nums\"\n            ],\n            \"extraData\": {\n                \"code\": [\n                    \"function split(input) {\",\n                    \"return (input[0][0] + input[0][1]) % 2 === 0\",\n                    \"}\"\n                ]\n            }\n        },\n        {\n            \"nodeName\": \"count\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@even\"\n            ],\n            \"extraData\": {\n                \"code\": [\n                    \"function count (input) {\",\n                    \"let counter=0\",\n                    \"for (let i=0 ; i<input[0].length ; i++){\",\n                    \"if (input[0][i]){\",\n                    \"counter++}}\",\n                    \"return counter\",\n                    \"}\"\n                ]\n            }\n        }\n    ],\n    \"options\": {\n        \"batchTolerance\": 60,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"priority\": 3,\n    \"flowInput\": {\n        \"nums\": [\n            [\n                2,\n                3\n            ],\n            [\n                3,\n                3\n            ],\n            [\n                4,\n                4\n            ],\n            [\n                676666,\n                4\n            ],\n            [\n                566,\n                2\n            ],\n            [\n                12335,\n                8989\n            ],\n            [\n                2,\n                3\n            ],\n            [\n                3,\n                3\n            ],\n            [\n                4,\n                4\n            ],\n            [\n                1,\n                1\n            ]\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "7191fddd-e00a-4d27-9dc1-0b48291254d4",
					"name": "/exec/raw - wc",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple-eval\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"split\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                 \"#@flowInput.text\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function split(input) {\",\n                     \"return input[0].split(' ');\",\n                \"}\"]}\n        },\n        {\n            \"nodeName\": \"reduce\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"*@split\"\n            ],\n            \"extraData\":{\n               \"code\": [\n           \t    \"function reduce(input) {\",\n                   \"return input[0].reduce((all, word) => { \",\n                         \"if (word in all) {\",\n                      \t    \"all[word]++;\",\n                      \t\"}\",\n                      \t\"else {\",\n                      \t\t\"all[word] = 1;\",\n                      \t\"}\",\n                      \t\"return all;\",\n                      \"}, {});\",\n                   \"}\"\n            ]}\n        },\n        {\n            \"nodeName\": \"count\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@reduce\"\n            ],\n             \"extraData\":{\n                \"code\": [\n          \t    \"function count(input) {\",\n          \t        \"let dict = {}\",\n          \t        \"input[0].forEach(r => {\",\n          \t           \"Object.entries(r).forEach(([k, v]) => {\",\n                          \"if (!dict[k]) {\",\n                              \"dict[k] = 0;\",\n                           \"}\",\n                           \"dict[k] += v\",\n                           \"});\",\n                        \"});\",\n                       \"return dict\",\n          \t       \"}\"\n            ]}\n             \n        }\n    ],\n    \"flowInput\": {\n        \"text\": [\"In mathematics and computer science, a directed acyclic graph \",\n\t\t\t    \"(DAG (About this sound listen)), is a finite directed graph with\",\n\t\t\t    \" no directed cycles. That is, it consists of finitely many vertices and\",\n\t\t\t    \"edges, with each edge directed from one vertex to another, \",\n\t\t\t    \"such that there is no way to start at any vertex v and follow\",\n\t\t\t    \"a consistently-directed sequence of edges that eventually \",\n\t\t\t    \"loops back to v again. Equivalently, a DAG is a directed graph\",\n\t\t\t    \"that has a topological ordering, a sequence of the vertices \",\n\t\t\t    \"such that every edge is directed from earlier to later in the sequence.\",\n\t\t\t    \"DAGs can model many different kinds of information. \",\n\t\t\t    \"A spreadsheet can be modeled as a DAG, with a vertex \",\n\t\t\t    \"for each cell and an edge whenever the formula in one \",\n\t\t\t    \"cell uses the value from another; a topological ordering of this \",\n\t\t\t    \"DAG can be used to update all cell values when the spreadsheet is \",\n\t\t\t    \"changed. Similarly, topological orderings of DAGs can be used to order \",\n\t\t\t    \"the compilation operations in a makefile. The program evaluation and review \",\n\t\t\t    \"technique uses DAGs to model the milestones and activities of large human \",\n\t\t\t    \"projects, and schedule these projects to use as little total time as possible. \",\n\t\t\t    \"Combinational logic blocks in electronic circuit design, and the operations \",\n\t\t\t    \"in dataflow programming languages, involve acyclic networks of processing elements.\",\n\t\t\t    \"DAGs can also represent collections of events and their influence on each other, \",\n\t\t\t    \"either in a probabilistic structure such as a Bayesian network or as a record of\",\n\t\t\t    \"historical data such as family trees or the version histories of distributed \",\n\t\t\t    \"revision control systems. DAGs can also be used as a compact representation of \",\n\t\t\t    \"sequence data, such as the directed acyclic word graph representation of a \",\n\t\t\t    \"collection of strings, or the binary decision diagram representation of sequences \",\n\t\t\t    \"of binary choices. More abstractly, the reachability relation in a DAG forms a \",\n\t\t\t    \"partial order, and any finite partial order may be represented by a DAG using reachability.\",\n\t\t\t    \"Important polynomial time computational problems on DAGs include topological sorting \",\n\t\t\t    \"(finding a topological ordering), construction of the transitive closure and transitive\",\n\t\t\t    \"reduction (the largest and smallest DAGs with the same reachability relation, respectively), \",\n\t\t\t    \"and the closure problem, in which the goal is to find a minimum-weight subset of vertices with \",\n\t\t\t    \"no edges connecting them to the rest of the graph. Transforming a directed graph with cycles \",\n\t\t\t    \"into a DAG by deleting as few vertices or edges as possible (the feedback vertex set and \",\n\t\t\t    \"feedback edge set problem, respectively) is NP-hard, but any directed graph can be made \",\n\t\t\t    \"into a DAG (its condensation) by contracting each strongly connected component into a \",\n\t\t\t    \"single supervertex. The problems of finding shortest paths and longest paths can be \",\n\t\t\t    \"solved on DAGs in linear time, in contrast to arbitrary graphs for which shortest path \",\n\t\t\t    \"algorithms are slower and longest path problems are NP-hard.\",\n\t\t\t    \"The corresponding concept for undirected graphs is a forest, an undirected graph without \",\n\t\t\t    \"cycles. Choosing an orientation for a forest produces a special kind of directed acyclic graph\",\n\t\t\t    \"called a polytree. However there are many other kinds of directed acyclic graph that are not\"]\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "ef9fd666-da17-42a1-9c55-68c0f0c4cb3b",
					"name": "/exec/raw - small wc",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple-eval\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"split\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                 \"#@flowInput.text\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function split(input) {\",\n                     \"return input[0].split(' ');\",\n                \"}\"]}\n        },\n        {\n            \"nodeName\": \"reduce\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"*@split\"\n            ],\n            \"extraData\":{\n               \"code\": [\n           \t    \"function reduce(input) {\",\n                   \"return input[0].reduce((all, word) => { \",\n                         \"if (word in all) {\",\n                      \t    \"all[word]++;\",\n                      \t\"}\",\n                      \t\"else {\",\n                      \t\t\"all[word] = 1;\",\n                      \t\"}\",\n                      \t\"return all;\",\n                      \"}, {});\",\n                   \"}\"\n            ]}\n        },\n        {\n            \"nodeName\": \"count\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@reduce\"\n            ],\n             \"extraData\":{\n                \"code\": [\n          \t    \"function count(input) {\",\n          \t        \"let dict = {}\",\n          \t        \"input[0].forEach(r => {\",\n          \t           \"Object.entries(r).forEach(([k, v]) => {\",\n                          \"if (!dict[k]) {\",\n                              \"dict[k] = 0;\",\n                           \"}\",\n                           \"dict[k] += v\",\n                           \"});\",\n                        \"});\",\n                       \"return dict\",\n          \t       \"}\"\n            ]}\n             \n        }\n    ],\n    \"flowInput\": {\n        \"text\": [\"In mathematics and computer science, a directed acyclic graph \",\n\t\t\t    \"edges, with each edge directed from one vertex to another, \",\n\t\t\t    \"such that there is no way to start at any vertex v and follow\"]\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "2daa5c29-a3f8-4cca-ade4-d491ddec088f",
					"name": "/exec/raw - small wc copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"addmuldiv\",\n  \"nodes\": [\n    {\n      \"nodeName\": \"evaladd\",\n      \"algorithmName\": \"eval-alg\",\n      \"input\": [\n        \"#@flowInput.addInput\"\n      ],\n      \"extraData\": {\n        \"code\": [\n          \"(input,require)=> {\",\n          \"const result = input[0][0]+input[0][1]\",\n          \"return result;}\"\n        ]\n      }\n    },\n    {\n      \"nodeName\": \"evalmul\",\n      \"algorithmName\": \"eval-alg\",\n      \"input\": [\n        \"#@flowInput.multInput\"\n      ],\n      \"extraData\": {\n        \"code\": [\n          \"(input,require)=> {\",\n          \"const result = input[0][0] * input[0][1]\",\n          \"return result;}\"\n        ]\n      }\n    },\n    {\n      \"nodeName\": \"evalDiv\",\n      \"algorithmName\": \"eval-alg\",\n      \"input\": [\n        \"*@evaladd\",\n        \"*@evalmul\"\n      ],\n      \"extraData\": {\n        \"code\": [\n          \"(input,require)=> {\",\n          \"const result = input[0] / input[1]\",\n          \"return result;}\"\n        ]\n      }\n    }\n  ],\n  \"options\": {\n    \"batchTolerance\": 60,\n    \"progressVerbosityLevel\": \"debug\"\n  },\n  \"priority\": 3,\n  \"flowInput\": {\n    \"addInput\": [\n      [\n        5,\n        3\n      ],\n      [\n        1,\n        2\n      ],\n      [\n        4,\n        7\n      ],\n      [\n        6,\n        3\n      ],\n      [\n        10,\n        5\n      ]\n    ],\n    \"multInput\": [\n      [\n        3,\n        2\n      ],\n      [\n        5,\n        7\n      ],\n      [\n        2,\n        2\n      ],\n      [\n        4,\n        5\n      ],\n      [\n        1,\n        3\n      ]\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "76e9d559-db3e-4eeb-9dc5-efd936c76b0f",
					"name": "/exec/raw - even odd",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple-eval\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"even\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                 \"#@flowInput.nums\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function split(input) {\",\n            \t     \"console.log('--------  TEST -------')\",\n                     \"return (input[0][0] + input[0][1]) % 2 === 0\",\n            \"}\"]}\n        },\n        {\n            \"nodeName\": \"reduce\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@even\"\n            ],\n            \"extraData\":{\n               \"code\": [\n           \t    \"function reduce(input) {\",\n                   \"return input[0].filter(r => r === true)\",\n                 \"}\"\n            ]}\n        }\n    ],\n    \"flowInput\": {\n        \"nums\": [[1,2],[3,4]]\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "edf0747a-bae4-4ff1-9489-60523ca12575",
					"name": "/exec/raw - count letters",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple-eval\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"text\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                 \"@flowInput.text\"\n            ],\n            \"extraData\":{\n            \t\"code\": [\n            \t\"function split(input) {\",\n            \t      \"return input[0].split(' ');\",\n            \"}\"]}\n        },\n        {\n            \"nodeName\": \"count\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"#@text\"\n            ],\n            \"extraData\":{\n               \"code\": [\n           \t    \"function reduce(input) {\",\n                   \"return Array.from(input[0]).filter(r => r === 'a').length\",\n                 \"}\"\n            ]}\n        }\n    ],\n    \"flowInput\": {\n        \"text\": \"In aaaaaaa and computer science, a directed acyclic graph, In mathematics and computer science, a directed acyclic graph, In mathematics and computer science, a directed acyclic graph\"\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://localhost:3003/webhook/progress\",\n        \"result\": \"http://localhost:3003/webhook/result\"\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "8bf59065-c5bb-4dee-b7da-56c6030dedf1",
					"name": "/exec/raw - eval calc",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"multadd\",\n    \"nodes\": [\n    \t        {\n            \"nodeName\": \"evalmul\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@flowInput.addInput\",\n                \"@flowInput.multInput\"\n            ],\n            \"extraData\": {\n                \"code\": [\n                    \"(input) => {\",\n                    \"const result = input[0] * input[1]\",\n                    \"return result;}\"\n                ]\n            }\n        },\n        {\n            \"nodeName\": \"evaladd\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                \"@flowInput.addInput\",\n                \"@evalmul\"\n            ],\n            \"extraData\": {\n                \"code\": [\n                    \"(input) => {\",\n                    \"const result = input[0] + input[1]\",\n                    \"return result;}\"\n                ]\n            }\n        }\n    ],\n    \"options\": {\n        \"batchTolerance\": 60,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"priority\": 3,\n    \"flowInput\": {\n        \"addInput\":  3,\n        \"multInput\": 5\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "ac4714c8-895a-4f3c-a11b-919297dc7154",
			"name": "stress",
			"item": [
				{
					"_postman_id": "04e22440-3d75-4f10-b9ea-ebc09d9454f4",
					"name": "/exec/stored - stress",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"stress\",\n  \"nodes\": [\n  {\n      \"nodeName\": \"black\",\n      \"algorithmName\": \"black-alg\",\n      \"input\": [\"#[0...50]\"]\n  }],\n  \"webhooks\": {\n        \"progress\": \"http://monitor-server:30010/webhook/progress\",\n        \"result\": \"http://monitor-server:30010/webhook/result\"\n    },\n  \"options\": {\n     \"batchTolerance\": 100,\n     \"progressVerbosityLevel\": \"debug\"\n  }\n}\n"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "772d90ce-3a84-48c8-8f05-e4c8d7e909cf",
					"name": "/exec/stored - stress (300)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"stress\",\n  \"nodes\": [\n  {\n      \"nodeName\": \"green\",\n      \"algorithmName\": \"eval-alg\",\n      \"input\": [\"#[0...10000\"]\n  }],\n  \"options\": {\n     \"batchTolerance\": 100,\n     \"progressVerbosityLevel\": \"debug\"\n  }\n}\n"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "1d3e1b52-cdbf-4711-82c5-4a1cb043257c",
					"name": "/exec/stored - eval (1000)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"primecheck\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"prime\",\n            \"algorithmName\": \"eval-alg\",\n            \"input\": [\n                [\n                    \"(input,require) => {\",\n                    \"var num=input[0]\",\n                    \"if (num == 1) {\",\n                    \"return num + ' not prime';}\",\n                    \"else if (num == 2) {\",\n                    \"return num + ' prime';}\",\n                    \"else {\",\n                    \"for (var x = 2; x < num; x++) {\",\n                    \"if (num % x == 0) {\",\n                    \"return num + ' not prime';}}\",\n                    \"return num + ' prime';}}\"\n                ],\n                \"#@flowInput.nums\"\n            ]\n        }\n    ],\n    \"flowInput\": {\n        \"nums\": [\n            1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n             1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n            1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n             1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n            1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n             1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n            1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n             1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n            1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n             1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n            1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n             1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n            1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299,\n             1232227,\n            1232243,\n            1232269,\n            1232291,\n            1232299\n        ]\n    },\n    \"webhooks\": {\n        \"progress\": \"http://10.42.128.80:3002/webhook/progress\",\n        \"result\": \"http://10.42.128.80:3002/webhook/result\"\n    },\n    \"options\": {\n        \"batchTolerance\": 60,\n        \"progressVerbosityLevel\": \"info\"\n    },\n    \"priority\": 3\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "75222383-9f14-43ca-9968-223d51ded4f6",
			"name": "stop",
			"item": [
				{
					"_postman_id": "e5b16a0e-b077-4e94-bcaf-759698599cbf",
					"name": "/exec/stop - latest",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"reason\": \"cancel from postman\"\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stop",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stop"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "3a967432-2d56-4e2e-b746-3bbe10ebb181",
			"name": "status",
			"item": [
				{
					"_postman_id": "8e1c3518-64e4-4e0d-a3e4-ad9281e24180",
					"name": "/exec/status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"execution_id\": \"{{execution_id}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/exec/status/{{jobId}}?",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"status",
								"{{jobId}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "6848ce6b-f96a-4eb4-9dfc-d9bab05ed189",
					"name": "/exec/pipelines/status/raw",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"execution_id\": \"{{execution_id}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/exec/pipelines/status/raw/raw-simple?sort=desc&order=mod&limit=50",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"pipelines",
								"status",
								"raw",
								"raw-simple"
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								},
								{
									"key": "order",
									"value": "mod"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "45dfd9fe-900e-42a2-9ef2-34e7d8740e60",
					"name": "/exec/pipelines/status/stored",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"execution_id\": \"{{execution_id}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/exec/pipelines/status/stored/evalwait?sort=asc&order=mod&limit=1000",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"pipelines",
								"status",
								"stored",
								"evalwait"
							],
							"query": [
								{
									"key": "sort",
									"value": "asc"
								},
								{
									"key": "order",
									"value": "mod"
								},
								{
									"key": "limit",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "7611f6ea-1755-4f73-bf92-442cfb792aae",
					"name": "/exec/cron/status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"execution_id\": \"{{execution_id}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/exec/cron/status/simple_trigger?sort=desc&order=mod&limit=5",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"cron",
								"status",
								"simple_trigger"
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								},
								{
									"key": "order",
									"value": "mod"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "610ece03-aa72-4cb2-a5b7-6473a81dc7d1",
			"name": "result",
			"item": [
				{
					"_postman_id": "557ab86f-6083-45e8-b228-110f8c949f2a",
					"name": "/exec/results",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"execution_id\": \"{{execution_id}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/exec/results/{{jobId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"results",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "9b6231eb-3536-4819-a41b-2ead39570aa2",
					"name": "/exec/cron/results",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"execution_id\": \"{{execution_id}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/exec/cron/results/simple_trigger?sort=desc&order=mod&limit=5",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"cron",
								"results",
								"simple_trigger"
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								},
								{
									"key": "order",
									"value": "mod"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "b435c735-9bfd-4556-bb65-9d8613a166e1",
					"name": "/exec/pipelines/results/raw",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"execution_id\": \"{{execution_id}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/exec/pipelines/results/raw/simple?sort=desc&order=mod&limit=50",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"pipelines",
								"results",
								"raw",
								"simple"
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								},
								{
									"key": "order",
									"value": "mod"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "deff35f5-2bb2-41a8-896a-d8753a0e82cc",
					"name": "/exec/pipelines/results/stored",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"execution_id\": \"{{execution_id}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/exec/pipelines/results/stored/trigger?sort=desc&order=mod&limit=5",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"pipelines",
								"results",
								"stored",
								"trigger"
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								},
								{
									"key": "order",
									"value": "mod"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "7adce364-dc84-4c68-a369-67c513d8263b",
			"name": "store",
			"item": [
				{
					"_postman_id": "607b64ca-8fb4-4c87-a770-f696630e9fde",
					"name": "/store/pipelines",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"simple-wait-batch\",\n  \"options\": {\n    \"batchTolerance\": 100,\n    \"progressVerbosityLevel\": \"debug\"\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/store/pipelines",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"pipelines"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "28de306c-ba37-44c2-8384-cbbb9ddd408b",
					"name": "/store/pipelines/<name>",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"simple-wait-batch\",\n  \"options\": {\n    \"batchTolerance\": 100,\n    \"progressVerbosityLevel\": \"debug\"\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/store/pipelines/simple trigger",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"pipelines",
								"simple trigger"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "4b21e8a8-4681-41bc-a44d-cda5c7955496",
					"name": "/store/pipelines",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"name\": \"simple\",\n        \"nodes\": [\n            {\n                \"nodeName\": \"green\",\n                \"algorithmName\": \"green-alg\",\n                \"input\": [\n                    \"@flowInput.files.link\"\n                ]\n            },\n            {\n                \"nodeName\": \"yellow\",\n                \"algorithmName\": \"yellow-alg\",\n                \"input\": [\n                    \"@green\"\n                ]\n            },\n            {\n                \"nodeName\": \"black\",\n                \"algorithmName\": \"black-alg\",\n                \"input\": [\n                    \"@yellow\"\n                ]\n            }\n        ],\n        \"flowInput\": {\n            \"files\": {\n                \"link\": \"links-1\"\n            }\n        },\n        \"webhooks\": {\n            \"progress\": \"http://localhost:3003/webhook/progress\",\n            \"result\": \"http://localhost:3003/webhook/result\"\n        },\n        \"priority\": 3\n    }"
						},
						"url": {
							"raw": "{{url}}/store/pipelines",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"pipelines"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "22d41a35-b1a8-44ec-9ffe-bef687cd7be5",
					"name": "/store/pipelines/<name>",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/store/pipelines/simple_trigger",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"pipelines",
								"simple_trigger"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "7cd008b4-3c74-49fb-83f5-16ea7834087d",
					"name": "/store/pipelines",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"evalWaitAny\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"evalsleep\",\n            \"algorithmName\": \"new_alg\",\n            \"input\": [\n                \"#@flowInput.inputs\"\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{url}}/store/pipelines",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"pipelines"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "658dbd76-59da-4401-b87c-dc970bdfee87",
			"name": "algorithms",
			"item": [
				{
					"_postman_id": "7137e429-0b60-4a45-8e97-a5b3f50d5e02",
					"name": "/store/algorithms",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"simple-wait-batch\",\n  \"options\": {\n    \"batchTolerance\": 100,\n    \"progressVerbosityLevel\": \"debug\"\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/store/algorithms",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"algorithms"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "385ed0fb-da98-41db-99b4-c5dc06c14b27",
					"name": "/store/algorithms/<name>",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"simple-wait-batch\",\n  \"options\": {\n    \"batchTolerance\": 100,\n    \"progressVerbosityLevel\": \"debug\"\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/store/algorithms/green-alg",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"algorithms",
								"green-alg"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "eaf8ef08-9631-40cf-bd40-8955a39ed396",
					"name": "/store/algorithms",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"cpu-load\",\n    \"algorithmImage\": \"hkube/algorunner\",\n    \"cpu\": 12,\n    \"mem\": \"40Mi\"\n}"
						},
						"url": {
							"raw": "{{url}}/store/algorithms",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"algorithms"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "6b731503-8634-445f-be84-706b1d6562af",
					"name": "/store/algorithms/<name>",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/store/algorithms/debug/debug",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"algorithms",
								"debug",
								"debug"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "bc85fd03-ed2d-4a1f-a996-140e67341565",
					"name": "/store/algorithms",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"debug\",\n    \"algorithmImage\": \"hkube/algorithm-example\",\n    \"cpu\": 0.1,\n    \"mem\": \"4Mi\"\n}"
						},
						"url": {
							"raw": "{{url}}/store/algorithms/debug",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"algorithms",
								"debug"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "57fa0dc1-7e8a-4c3c-b64c-74e3adcea47a",
			"name": "webhooks",
			"item": [
				{
					"_postman_id": "617f6875-9f8a-43be-bb27-3376414bee88",
					"name": "/webhooks/results",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"execution_id\": \"{{execution_id}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/webhooks/results/{{jobId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"webhooks",
								"results",
								"{{jobId}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "a3104b6b-03d2-4d7d-a7b7-983bab50e431",
					"name": "/webhooks/status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"execution_id\": \"{{execution_id}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/webhooks/status/{{jobId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"webhooks",
								"status",
								"{{jobId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "a068d12d-ada4-4009-99ab-b48a1e541790",
			"name": "test",
			"item": [
				{
					"_postman_id": "546cbf40-9782-444a-9d46-923e6ce15595",
					"name": "/exec/raw - simple Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"jobId\", jsonData.jobId);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"simple\",\n    \"nodes\": [\n        {\n            \"nodeName\": \"green\",\n            \"algorithmName\": \"green-alg\",\n            \"input\": [\n                \"@flowInput.files.link\"\n            ]\n        },\n        {\n            \"nodeName\": \"yellow\",\n            \"algorithmName\": \"yellow-alg\",\n            \"input\": [\n                \"@green\"\n            ]\n        },\n        {\n            \"nodeName\": \"black\",\n            \"algorithmName\": \"black-alg\",\n            \"input\": [\n                \"@yellow\"\n            ]\n        }\n    ],\n    \"flowInput\": {\n        \"files\": {\n            \"link\": \"links-1\"\n        }\n    },\n    \"options\": {\n        \"batchTolerance\": 100,\n        \"progressVerbosityLevel\": \"debug\"\n    },\n    \"webhooks\": {\n        \"progress\": \"http://monitor-server:30010/webhook/progress\",\n        \"result\": \"http://monitor-server:30010/webhook/result\"\n    },\n    \"priority\": 1\n}"
						},
						"url": {
							"raw": "{{url}}/exec/raw",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"raw"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "9b54b860-abd7-4a10-8594-90b20a50429b",
					"name": "/exec/stop - latest Copy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jobId\": \"{{jobId}}\",\n  \"reason\": \"cancel from postman\"\n}"
						},
						"url": {
							"raw": "{{url}}/exec/stop",
							"host": [
								"{{url}}"
							],
							"path": [
								"exec",
								"stop"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}